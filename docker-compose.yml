services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    image: tarot_api:latest
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      - RAILS_ENV=development
      - RAILS_MASTER_KEY=${RAILS_MASTER_KEY}
      - S3_ENDPOINT=http://minio:9000
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-minioadmin}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-minioadmin}
      - AWS_BUCKET=${AWS_BUCKET:-tarot-api}
      - AWS_REGION=${AWS_DEFAULT_REGION:-mx-central-1}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DB_HOST=postgres
      - DB_NAME=tarot_api_development
      - DB_USERNAME=tarot_api
      - DB_PASSWORD=password
      - OLLAMA_API_HOST=http://ollama:11434
    volumes:
      - gem_cache:/usr/local/bundle
    develop:
      watch:
        - action: sync+restart
          path: ./db/migrate
          target: /app/db/migrate
        - action: sync
          path: .
          target: /app
          ignore:
            - node_modules/
            - .git/
            - tmp/
            - vendor/
            - coverage/
            - log/
            - storage/
            - public/assets/
            - public/packs/
            - .bundle/
            - .docker/
            - .yarn/
            - swagger/
        - action: rebuild
          path: Gemfile
        - action: rebuild
          path: Gemfile.lock
    command: bundle exec rails server -b 0.0.0.0
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s
    extra_hosts:
      - "host.docker.internal:host-gateway"
      - "localhost:host-gateway"
    networks:
      default:
        aliases:
          - api

  ollama:
    image: ollama/ollama:latest
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "11434:11434"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      default:
        aliases:
          - ollama

  postgres:
    image: postgres:16-bookworm
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=tarot_api
      - POSTGRES_DB=tarot_api_development
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    command: ["postgres", "-c", "superuser_reserved_connections=0"]
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tarot_api"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      default:
        aliases:
          - db
          - postgres
          - localhost

  redis:
    image: redis:7-bookworm
    volumes:
      - redis_data:/data
    env_file:
      - .env
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    command: redis-server --appendonly yes
    networks:
      default:
        aliases:
          - redis
          - localhost

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    env_file:
      - .env
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID:-minioadmin}
      - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY:-minioadmin}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      default:
        aliases:
          - minio

volumes:
  postgres_data:
  redis_data:
  minio_data:
  gem_cache:
  ollama_data:

networks:
  default:
    driver: bridge 