name: subscription management

on:
  schedule:
    - cron: "0 0 * * *"  # run daily at midnight
  workflow_dispatch:  # allow manual trigger

jobs:
  manage_subscriptions:
    name: manage subscriptions
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: set up ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4'
          bundler-cache: true

      - name: setup database
        env:
          RAILS_ENV: production
          DATABASE_URL: postgres://postgres:postgres@localhost:5432
          REDIS_URL: redis://localhost:6379/0
        run: bundle exec rake db:migrate

      - name: sync stripe products
        env:
          RAILS_ENV: production
          DATABASE_URL: postgres://postgres:postgres@localhost:5432
          REDIS_URL: redis://localhost:6379/0
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
        run: bundle exec rake subscriptions:sync_products

      - name: check subscription statuses
        env:
          RAILS_ENV: production
          DATABASE_URL: postgres://postgres:postgres@localhost:5432
          REDIS_URL: redis://localhost:6379/0
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
        run: bundle exec rake subscriptions:check_statuses

      - name: reset usage counters for subscribers
        env:
          RAILS_ENV: production
          DATABASE_URL: postgres://postgres:postgres@localhost:5432
          REDIS_URL: redis://localhost:6379/0
        run: bundle exec rake subscriptions:reset_usage

      - name: reset monthly quotas for free users
        env:
          RAILS_ENV: production
          DATABASE_URL: postgres://postgres:postgres@localhost:5432
          REDIS_URL: redis://localhost:6379/0
          DEFAULT_FREE_TIER_LIMIT: ${{ vars.FREE_TIER_READING_LIMIT || 100 }}
        run: bundle exec rake usage:reset_counters

      - name: update free tier limits
        env:
          RAILS_ENV: production
          DATABASE_URL: postgres://postgres:postgres@localhost:5432
          REDIS_URL: redis://localhost:6379/0
          DEFAULT_FREE_TIER_LIMIT: ${{ vars.FREE_TIER_READING_LIMIT || 100 }}
        run: bundle exec rake usage:update_free_tier[${{ vars.FREE_TIER_READING_LIMIT || 100 }}]

      - name: check llm setup
        env:
          RAILS_ENV: production
          DATABASE_URL: postgres://postgres:postgres@localhost:5432
          REDIS_URL: redis://localhost:6379/0
          LOCAL_LLM_PATH: ${{ vars.LOCAL_LLM_PATH || '/opt/llama.cpp/main' }}
          LOCAL_LLM_MODEL: ${{ vars.LOCAL_LLM_MODEL || '/opt/llama.cpp/models/tinyllama-1.1b-chat-v1.0.Q4_K_M.gguf' }}
        run: bundle exec rake llm:setup

      - name: test llm models
        env:
          RAILS_ENV: production
          DATABASE_URL: postgres://postgres:postgres@localhost:5432
          REDIS_URL: redis://localhost:6379/0
          LOCAL_LLM_PATH: ${{ vars.LOCAL_LLM_PATH || '/opt/llama.cpp/main' }}
          LOCAL_LLM_MODEL: ${{ vars.LOCAL_LLM_MODEL || '/opt/llama.cpp/models/tinyllama-1.1b-chat-v1.0.Q4_K_M.gguf' }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: bundle exec rake llm:test_all

      - name: test multi-provider llm models
        env:
          RAILS_ENV: production
          DATABASE_URL: postgres://postgres:postgres@localhost:5432
          REDIS_URL: redis://localhost:6379/0
          LOCAL_LLM_PATH: ${{ vars.LOCAL_LLM_PATH || '/opt/llama.cpp/main' }}
          LOCAL_LLM_MODEL: ${{ vars.LOCAL_LLM_MODEL || '/opt/llama.cpp/models/tinyllama-1.1b-chat-v1.0.Q4_K_M.gguf' }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          APP_URL: ${{ vars.APP_URL || 'https://tarotapi.cards' }}
          DEFAULT_LLM_MODEL: ${{ vars.DEFAULT_LLM_MODEL || 'gpt-4o-mini' }}
          PREMIUM_LLM_MODEL: ${{ vars.PREMIUM_LLM_MODEL || 'claude-3-5-sonnet-v2@20241022' }}
          PROFESSIONAL_LLM_MODEL: ${{ vars.PROFESSIONAL_LLM_MODEL || 'claude-3-7-sonnet@20250219' }}
          ENABLE_PROFESSIONAL_TIER: ${{ vars.ENABLE_PROFESSIONAL_TIER || 'false' }}
        run: bundle exec rake llm:test_providers

      - name: cleanup unused files
        run: bundle exec rake llm:cleanup

      - name: reset llm counters for monthly cycle
        env:
          RAILS_ENV: production
          DATABASE_URL: postgres://postgres:postgres@localhost:5432
          REDIS_URL: redis://localhost:6379/0
        run: bundle exec rake llm:reset_counters

      - name: update llm limits
        env:
          RAILS_ENV: production
          DATABASE_URL: postgres://postgres:postgres@localhost:5432
          REDIS_URL: redis://localhost:6379/0
          DEFAULT_LLM_CALL_LIMIT: ${{ vars.DEFAULT_LLM_CALL_LIMIT || 1000 }}
        run: bundle exec rake llm:update_limits[${{ vars.DEFAULT_LLM_CALL_LIMIT || 1000 }}]

      - name: audit subscription usage
        env:
          RAILS_ENV: production
          DATABASE_URL: postgres://postgres:postgres@localhost:5432
          REDIS_URL: redis://localhost:6379/0
        run: bundle exec rake subscriptions:audit_usage

      - name: check user quotas
        id: check_quotas
        env:
          RAILS_ENV: production
          DATABASE_URL: postgres://postgres:postgres@localhost:5432
          REDIS_URL: redis://localhost:6379/0
        run: |
          QUOTA_OUTPUT=$(bundle exec rake usage:check_quotas)
          echo "quota_output<<EOF" >> $GITHUB_OUTPUT
          echo "$QUOTA_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Check for warning signs in output
          if echo "$QUOTA_OUTPUT" | grep -q "EXCEEDED\|LOW"; then
            echo "has_warnings=true" >> $GITHUB_OUTPUT
          else
            echo "has_warnings=false" >> $GITHUB_OUTPUT
          fi

      - name: check llm usage
        id: check_llm
        env:
          RAILS_ENV: production
          DATABASE_URL: postgres://postgres:postgres@localhost:5432
          REDIS_URL: redis://localhost:6379/0
        run: |
          LLM_OUTPUT=$(bundle exec rake llm:check_usage)
          echo "llm_output<<EOF" >> $GITHUB_OUTPUT
          echo "$LLM_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Check for warning signs in output
          if echo "$LLM_OUTPUT" | grep -q "EXCEEDED\|APPROACHING"; then
            echo "has_warnings=true" >> $GITHUB_OUTPUT
          else
            echo "has_warnings=false" >> $GITHUB_OUTPUT
          fi

      - name: email security team about quota warnings
        if: steps.check_quotas.outputs.has_warnings == 'true' || steps.check_llm.outputs.has_warnings == 'true'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "[WARNING] Tarot API - Resource Usage Warnings"
          body: |
            The following usage warnings were detected:
            
            === READING QUOTA STATUS ===
            ${{ steps.check_quotas.outputs.quota_output }}
            
            === LLM USAGE STATUS ===
            ${{ steps.check_llm.outputs.llm_output }}
            
            Please review and take appropriate action.
            
            This is an automated message from the Tarot API subscription management system.
          to: ${{ secrets.SECURITY_EMAIL }}
          from: Tarot API Subscription Monitor <${{ secrets.SMTP_USERNAME }}>

  backup_database:
    name: backup database
    runs-on: ubuntu-latest
    steps:
      - name: create database backup
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          S3_BACKUP_BUCKET: ${{ secrets.S3_BACKUP_BUCKET }}
        run: |
          # Install pg_dump
          sudo apt-get update && sudo apt-get install -y postgresql-client
          
          # Create backup filename with timestamp
          BACKUP_FILE="tarot_api_backup_$(date +%Y%m%d_%H%M%S).sql"
          
          # Create backup
          pg_dump $DATABASE_URL > $BACKUP_FILE
          
          # Install AWS CLI
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          
          # Upload to S3
          aws s3 cp $BACKUP_FILE s3://$S3_BACKUP_BUCKET/database_backups/$BACKUP_FILE
          
          echo "Database backup created and uploaded to S3: $BACKUP_FILE"

  notify_status:
    name: notify completion
    needs: [manage_subscriptions, backup_database]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: check workflow status
        id: check_status
        run: |
          if [[ "${{ needs.manage_subscriptions.result }}" != "success" || "${{ needs.backup_database.result }}" != "success" ]]; then
            echo "workflow_failed=true" >> $GITHUB_OUTPUT
            echo "failure_details=Subscription management workflow failed. Errors detected in the process." >> $GITHUB_OUTPUT
          else
            echo "workflow_failed=false" >> $GITHUB_OUTPUT
          fi

      - name: email security team about failures
        if: steps.check_status.outputs.workflow_failed == 'true'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "[ALERT] Tarot API - Subscription Management Failure"
          body: |
            The subscription management workflow has failed.
            
            Details:
            ${{ steps.check_status.outputs.failure_details }}
            
            Please check the GitHub Actions logs for more information.
            
            This is an automated message from the Tarot API subscription management system.
          to: ${{ secrets.SECURITY_EMAIL }}
          from: Tarot API Subscription Monitor <${{ secrets.SMTP_USERNAME }}> 