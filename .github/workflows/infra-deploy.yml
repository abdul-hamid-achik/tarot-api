name: infrastructure and app deployment

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
      - 'preview-*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - production
          - staging
      action:
        description: 'action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - preview
          - destroy
          - backup-state
          - restore-state
          - release
          - hotfix
          - rollback
      state_file:
        description: 'path to state file (for restore-state action)'
        required: false
        type: string
      auto_confirm:
        description: 'automatically confirm production deployment in pipeline (use carefully)'
        required: false
        default: false
        type: boolean
      version:
        description: 'version tag for release/hotfix/rollback (optional for release/hotfix)'
        required: false
        type: string

# ensure only one deployment workflow runs at a time per environment
concurrency:
  group: pulumi-${{ github.event.inputs.environment || (startsWith(github.ref, 'refs/tags/v') && 'production') || (startsWith(github.ref, 'refs/tags/preview-') && 'preview') || (github.ref == 'refs/heads/main' && 'staging') || 'default' }}
  cancel-in-progress: false

jobs:
  # build and push to both GHCR and ECR
  build-and-push:
    name: build and push image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      packages: write
    outputs:
      tag: ${{ steps.determine_tag.outputs.tag }}
    
    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: set up ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      
      - name: determine target environment and tag
        id: determine_tag
        run: |
          if [[ "${{ github.ref }}" == "refs/tags/v"* ]]; then
            echo "TARGET=production" >> $GITHUB_ENV
            echo "tag=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.environment }}" == "production" ]]; then
            echo "TARGET=production" >> $GITHUB_ENV
            echo "tag=production" >> $GITHUB_OUTPUT
          else
            echo "TARGET=development" >> $GITHUB_ENV
            echo "tag=latest" >> $GITHUB_OUTPUT
          fi
      
      - name: set up docker buildx
        uses: docker/setup-buildx-action@v3
      
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: mx-central-1
      
      - name: get aws account id
        id: get_aws_account
        run: echo "aws_account_id=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_ENV
      
      - name: build container image
        run: |
          # Build for the target environment
          bundle exec rake deploy:build[${{ env.TARGET }}]
        env:
          RAILS_ENV: ${{ env.TARGET }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
          AWS_REGION: mx-central-1
          AWS_DEFAULT_REGION: mx-central-1
  
      - name: Push Container Image
        run: |
          # Different registry handling based on environment
          if [[ "${{ env.TARGET }}" == "development" ]]; then
            # For development, use GitHub Container Registry
            export CONTAINER_REGISTRY="ghcr.io/${{ github.repository_owner }}/tarotapi"
          else
            # For production/staging, use the ECR from Pulumi
            # First make sure we're in the right directory
            cd infrastructure
            export CONTAINER_REGISTRY=$(pulumi stack output containerRegistry --stack ${{ env.TARGET }})
            cd ..
          fi
          
          echo "Using container registry: $CONTAINER_REGISTRY"
          
          # Push the container
          bundle exec rake deploy:push[${{ env.TARGET }}]
        env:
          RAILS_ENV: ${{ env.TARGET }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
          AWS_REGION: mx-central-1
          AWS_DEFAULT_REGION: mx-central-1
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  
  # deploy to staging when merging to main
  deploy-staging:
    name: deploy to staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name != 'workflow_dispatch'
    
    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: set up ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      
      - name: set up pulumi
        uses: pulumi/actions@v6.2.0
      
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: mx-central-1
      
      - name: generate pulumi config
        run: bundle exec rake deploy:generate_config
        env:
          RAILS_ENV: staging
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_ORG: ${{ secrets.PULUMI_ORG || 'abdul-hamid-achik' }}
          AWS_REGION: mx-central-1
          DOMAIN_NAME: staging.tarotapi.cards
          ALT_DOMAIN_NAME: staging.tarot.cards
          OLLAMA_API_KEY: ${{ secrets.OLLAMA_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_REPOSITORY: ${{ github.repository }}
      
      - name: deploy infrastructure
        run: bundle exec rake deploy:pulumi
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_STACK: staging
          PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          AWS_REGION: mx-central-1
          AWS_DEFAULT_REGION: mx-central-1
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
      
      - name: deploy application
        run: bundle exec rake deploy:kamal
        env:
          RAILS_ENV: staging
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_STACK: staging
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
          AWS_REGION: mx-central-1
      
      - name: get deployment url
        id: get_url
        run: |
          cd infrastructure
          echo "url=$(pulumi stack output -s staging dbEndpoint)" >> $GITHUB_OUTPUT
          echo "api_dns=staging.tarotapi.cards" >> $GITHUB_OUTPUT
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
      
      - name: comment on pr
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { issue: { number: issue_number }, repo: { owner, repo } } = context;
            const deploymentUrl = `https://${{ steps.get_url.outputs.api_dns }}`;
            github.rest.issues.createComment({
              issue_number,
              owner,
              repo,
              body: `ðŸš€ Staging environment deployed: [${deploymentUrl}](${deploymentUrl})`
            });
  
  # create preview environment when tagging with preview-*
  deploy-preview:
    name: deploy preview environment
    runs-on: ubuntu-latest
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/preview-') || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'preview')
    
    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: set up ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      
      - name: set up pulumi
        uses: pulumi/actions@v6.2.0
      
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: mx-central-1
      
      - name: extract preview name
        id: extract_name
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            PREVIEW_NAME="${{ github.event.inputs.environment }}"
          else
            PREVIEW_NAME=$(echo ${GITHUB_REF#refs/tags/preview-} | sed 's/\//_/g')
          fi
          echo "preview_name=$PREVIEW_NAME" >> $GITHUB_OUTPUT
      
      - name: generate pulumi config for preview
        run: bundle exec rake deploy:generate_config
        env:
          RAILS_ENV: ${{ steps.extract_name.outputs.preview_name }}
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_ORG: ${{ secrets.PULUMI_ORG || 'abdul-hamid-achik' }}
          AWS_REGION: mx-central-1
          DOMAIN_NAME: ${{ steps.extract_name.outputs.preview_name }}.tarotapi.cards
          ALT_DOMAIN_NAME: ${{ steps.extract_name.outputs.preview_name }}.tarot.cards
          OLLAMA_API_KEY: ${{ secrets.OLLAMA_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_REPOSITORY: ${{ github.repository }}
      
      - name: deploy preview environment
        run: bundle exec rake deploy:all
        env:
          RAILS_ENV: ${{ steps.extract_name.outputs.preview_name }}
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_STACK: ${{ steps.extract_name.outputs.preview_name }}
          PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
          PULUMI_SKIP_PREVIEW: "true"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: mx-central-1
  
  # deploy to production when tagging with v* or manually triggering with production env
  deploy-production:
    name: deploy to production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://tarotapi.cards
    
    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: set up ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      
      - name: set up pulumi
        uses: pulumi/actions@v6.2.0
      
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: mx-central-1
      
      - name: generate pulumi config
        run: bundle exec rake deploy:generate_config
        env:
          RAILS_ENV: production
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_ORG: ${{ secrets.PULUMI_ORG || 'abdul-hamid-achik' }}
          AWS_REGION: mx-central-1
          DOMAIN_NAME: tarotapi.cards
          ALT_DOMAIN_NAME: tarot.cards
          OLLAMA_API_KEY: ${{ secrets.OLLAMA_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_REPOSITORY: ${{ github.repository }}
      
      - name: deploy infrastructure
        run: bundle exec rake deploy:pulumi
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_STACK: production
          PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          AWS_REGION: mx-central-1
          AWS_DEFAULT_REGION: mx-central-1
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
      
      - name: deploy application
        run: bundle exec rake deploy:kamal
        env:
          RAILS_ENV: production
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_STACK: production
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
          AWS_REGION: mx-central-1 