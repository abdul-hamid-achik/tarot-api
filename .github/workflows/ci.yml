name: CI

on:
  pull_request:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  workflow_dispatch:  # Allow manual triggering

jobs:
  # Check if we should run the full CI suite
  check_ci_requirements:
    name: Check CI requirements
    runs-on: ubuntu-latest
    outputs:
      run_full_ci: ${{ steps.check.outputs.run_full_ci }}
    steps:
      - id: check
        name: Determine if full CI should run
        run: |
          # Skip full CI for Dependabot PRs, but allow security linting
          if [[ "${{ github.actor }}" == "dependabot[bot]" ]]; then
            echo "run_full_ci=false" >> $GITHUB_OUTPUT
            echo "Running limited CI for Dependabot PR"
          else
            echo "run_full_ci=true" >> $GITHUB_OUTPUT
            echo "Running full CI suite"
          fi

  build_and_push_image:
    name: Build and push CI image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/tarot-api-ci
          tags: |
            type=raw,value=latest
            type=sha,format=short

      - name: Build and cache CI image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: development
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=/tmp/tarot-api-ci.tar
          cache-from: |
            type=gha
            type=registry,ref=ghcr.io/${{ github.repository }}/tarot-api-ci:latest
          cache-to: type=gha,mode=max

      - name: Upload image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: tarot-api-ci-image
          path: /tmp/tarot-api-ci.tar
          retention-days: 1

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: build_and_push_image
    # Always run linting even for Dependabot PRs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download CI image
        uses: actions/download-artifact@v4
        with:
          name: tarot-api-ci-image
          path: /tmp
      
      - name: Load CI image
        run: docker load --input /tmp/tarot-api-ci.tar
      
      - name: Cache RuboCop results
        uses: actions/cache@v4
        with:
          path: tmp/rubocop_cache
          key: ${{ runner.os }}-rubocop-${{ hashFiles('**/.rubocop.yml') }}
          restore-keys: |
            ${{ runner.os }}-rubocop-
      
      - name: Lint code
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -v rubocop_cache:/app/tmp/rubocop_cache \
            tarot-api-ci:latest \
            bundle exec rake test:lint:all

  test:
    name: Tests
    needs: [check_ci_requirements, build_and_push_image]
    if: needs.check_ci_requirements.outputs.run_full_ci == 'true'
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-bookworm
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download CI image
        uses: actions/download-artifact@v4
        with:
          name: tarot-api-ci-image
          path: /tmp
      
      - name: Load CI image
        run: docker load --input /tmp/tarot-api-ci.tar

      - name: Cache test results
        uses: actions/cache@v4
        with:
          path: tmp/test_cache
          key: ${{ runner.os }}-test-${{ hashFiles('**/*.rb') }}
          restore-keys: |
            ${{ runner.os }}-test-
      
      - name: Run tests
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -v test_cache:/app/tmp/test_cache \
            --network host \
            -e RAILS_ENV=test \
            -e DATABASE_URL=postgres://postgres:postgres@localhost:5432 \
            -e REDIS_URL=redis://localhost:6379/0 \
            -e STRIPE_SECRET_KEY=${{ secrets.STRIPE_TEST_KEY }} \
            -e COVERAGE=true \
            -e SIMPLECOV_FORMATTER=SimpleCov::Formatter::HTMLFormatter \
            tarot-api-ci:latest \
            sh -c "bundle exec rake test:all"
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

      - name: Check test coverage
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            tarot-api-ci:latest \
            bundle exec rake test:verify_coverage

  docs:
    name: API Documentation
    needs: [check_ci_requirements, build_and_push_image]
    if: needs.check_ci_requirements.outputs.run_full_ci == 'true'
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-bookworm
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download CI image
        uses: actions/download-artifact@v4
        with:
          name: tarot-api-ci-image
          path: /tmp
      
      - name: Load CI image
        run: docker load --input /tmp/tarot-api-ci.tar
      
      - name: Generate API docs
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            --network host \
            -e RAILS_ENV=test \
            -e DATABASE_URL=postgres://postgres:postgres@localhost:5432 \
            tarot-api-ci:latest \
            bundle exec rake api:docs:generate

      - name: Validate API docs
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            tarot-api-ci:latest \
            bundle exec rake api:docs:validate
      
      - name: Upload API documentation
        uses: actions/upload-artifact@v4
        with:
          name: api-docs
          path: swagger/
          retention-days: 7

  ci_completed:
    name: CI Workflow Completed
    needs: [lint, test, docs]
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped') && (needs.docs.result == 'success' || needs.docs.result == 'skipped') && needs.lint.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: CI completed successfully
        run: echo "CI workflow completed successfully!"
    outputs:
      status: success
