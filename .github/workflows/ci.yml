name: ci

on:
  pull_request:
  push:
    branches: [main]

jobs:
  # Check if we should run the full CI suite
  check_ci_requirements:
    name: Check CI requirements
    runs-on: ubuntu-latest
    outputs:
      run_full_ci: ${{ steps.check.outputs.run_full_ci }}
    steps:
      - id: check
        name: Determine if full CI should run
        run: |
          # Skip full CI for Dependabot PRs, but allow security linting
          if [[ "${{ github.actor }}" == "dependabot[bot]" ]]; then
            echo "run_full_ci=false" >> $GITHUB_OUTPUT
            echo "Running limited CI for Dependabot PR"
          else
            echo "run_full_ci=true" >> $GITHUB_OUTPUT
            echo "Running full CI suite"
          fi
  
  build_image:
    name: Build CI image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and cache CI image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.ci
          target: ci
          tags: tarot-api-ci:latest
          outputs: type=docker,dest=/tmp/tarot-api-ci.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Upload image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: tarot-api-ci-image
          path: /tmp/tarot-api-ci.tar
          retention-days: 1

  lint:
    name: code quality
    runs-on: ubuntu-latest
    needs: build_image
    # Always run linting even for Dependabot PRs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download CI image
        uses: actions/download-artifact@v4
        with:
          name: tarot-api-ci-image
          path: /tmp
      
      - name: Load CI image
        run: docker load --input /tmp/tarot-api-ci.tar
      
      - name: Lint code
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            tarot-api-ci:latest \
            bundle exec rake test:lint:rubocop test:lint:brakeman test:lint:ruby_audit

  test:
    name: tests
    needs: [check_ci_requirements, build_image]
    # Only run tests if not a Dependabot PR or explicitly needed
    if: needs.check_ci_requirements.outputs.run_full_ci == 'true'
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download CI image
        uses: actions/download-artifact@v4
        with:
          name: tarot-api-ci-image
          path: /tmp
      
      - name: Load CI image
        run: docker load --input /tmp/tarot-api-ci.tar
      
      - name: Run tests
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            --network host \
            -e RAILS_ENV=test \
            -e DATABASE_URL=postgres://postgres:postgres@localhost:5432 \
            -e REDIS_URL=redis://localhost:6379/0 \
            -e STRIPE_SECRET_KEY=${{ secrets.STRIPE_TEST_KEY }} \
            -e COVERAGE=true \
            -e SIMPLECOV_FORMATTER=SimpleCov::Formatter::HTMLFormatter \
            tarot-api-ci:latest \
            sh -c "bundle exec rake test:prepare && \
                  bundle exec rake test:verify_coverage && \
                  bundle exec rake test:models:all && \
                  bundle exec rake test:services:all && \
                  bundle exec rake test:features:all && \
                  bundle exec rake test:subscriptions:all && \
                  bundle exec rake test:coverage"
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  docs:
    name: api documentation
    needs: [check_ci_requirements, build_image]
    # Only run docs generation if not a Dependabot PR or explicitly needed
    if: needs.check_ci_requirements.outputs.run_full_ci == 'true'
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download CI image
        uses: actions/download-artifact@v4
        with:
          name: tarot-api-ci-image
          path: /tmp
      
      - name: Load CI image
        run: docker load --input /tmp/tarot-api-ci.tar
      
      - name: Generate API docs
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            --network host \
            -e RAILS_ENV=test \
            -e DATABASE_URL=postgres://postgres:postgres@localhost:5432 \
            tarot-api-ci:latest \
            sh -c "bundle exec rake test:prepare && \
                  bundle exec rake api:docs && \
                  bundle exec rake api:validate"
      
      - name: Upload API documentation
        uses: actions/upload-artifact@v4
        with:
          name: api-docs
          path: swagger/
          retention-days: 7

  ci_completed:
    name: ci workflow completed
    needs: [lint, test, docs]
    # We need to modify the if condition to consider both normal and dependabot cases
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped') && (needs.docs.result == 'success' || needs.docs.result == 'skipped') && needs.lint.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: ci completed successfully
        run: echo "ci workflow completed successfully!"
    outputs:
      status: success
