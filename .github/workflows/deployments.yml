name: Deployments

on:
  # Auto-deploy to staging on merge to main
  push:
    branches: [main]
  
  # Deploy to production on release published
  release:
    types: [published]
  
  # Manual deployments
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
  
  # Run after security scan completes
  workflow_run:
    workflows: ["Security Scan"]
    types:
      - completed
    branches: [main]

jobs:
  wait_for_security_scan:
    name: Wait for Security Scan
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_run' && 
      github.event.workflow_run.conclusion == 'success' && 
      github.event.workflow_run.event == 'push'
    steps:
      - name: Security scan completed successfully
        run: echo "Security scan completed successfully, proceeding with deployment"

  check_permissions:
    name: Check permissions
    runs-on: ubuntu-latest
    needs: [wait_for_security_scan]
    if: |
      always() && 
      (github.event_name != 'workflow_run' || 
       (github.event_name == 'workflow_run' && needs.wait_for_security_scan.result == 'success'))
    outputs:
      allowed: ${{ steps.check.outputs.allowed }}
      environment: ${{ steps.environment.outputs.name }}
    steps:
      - id: check
        name: Check if user is allowed
        run: |
          # For production deployments, only abdul-hamid-achik is allowed
          DEPLOY_ENV="${{ github.event.inputs.environment }}"
          
          if [[ "${{ github.event_name }}" == "release" || "$DEPLOY_ENV" == "production" ]]; then
            if [[ "${{ github.actor }}" == "abdul-hamid-achik" ]]; then
              echo "allowed=true" >> $GITHUB_OUTPUT
            else
              echo "allowed=false" >> $GITHUB_OUTPUT
              echo "::error::Only abdul-hamid-achik can deploy to production"
            fi
          else
            # For staging, anyone can deploy
            echo "allowed=true" >> $GITHUB_OUTPUT
          fi
      
      - id: environment
        name: Determine environment
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "name=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "name=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "name=staging" >> $GITHUB_OUTPUT
          fi

  deploy_staging:
    name: Deploy to staging
    needs: check_permissions
    if: needs.check_permissions.outputs.environment == 'staging' && needs.check_permissions.outputs.allowed == 'true'
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-west-2
      PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
      PULUMI_STATE_BUCKET: ${{ secrets.PULUMI_STATE_BUCKET }}
      RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
      APP_NAME: tarotapi
      DOMAIN_NAME: tarotapi.cards
      DEPLOY_ENV: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4'
          bundler-cache: true
      
      - name: Install Pulumi CLI
        uses: pulumi/setup-pulumi@v2
      
      - name: Deploy to staging
        run: bundle exec rake aws:setup_infra
      
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,workflow,job
          text: |
            ${{ job.status == 'success' && 'üîÆ' || '‚ùå' }} *Staging Deployment ${{ job.status }}*
            
            *Branch:* ${{ github.ref_name }}
            *URL:* https://staging.${{ env.DOMAIN_NAME }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always() && env.SLACK_WEBHOOK_URL != ''

  deploy_production:
    name: Deploy to production (blue/green)
    needs: check_permissions
    if: needs.check_permissions.outputs.environment == 'production' && needs.check_permissions.outputs.allowed == 'true'
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-west-2
      PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
      PULUMI_STATE_BUCKET: ${{ secrets.PULUMI_STATE_BUCKET }}
      RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
      APP_NAME: tarotapi
      DOMAIN_NAME: tarotapi.cards
      RELEASE_VERSION: ${{ github.event.release.tag_name || format('v{0}', github.run_number) }}
      DEPLOY_ENV: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # fetch all history for changelog
      
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4'
          bundler-cache: true
      
      - name: Install Pulumi CLI
        uses: pulumi/setup-pulumi@v2
      
      - name: Validate release version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            # Ensure version follows format v1.2.3
            if ! [[ $RELEASE_VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "::error::Invalid version format. Must be vX.Y.Z"
              exit 1
            fi
          fi
          
          echo "‚úÖ Deployment version: $RELEASE_VERSION"
      
      - name: Generate deployment changelog
        run: |
          # Extract changes since last release
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            # If no previous tag, use all commits
            git log --pretty=format:"* %s (%h)" > CHANGELOG.md
          else
            # Otherwise, get commits since last tag
            git log --pretty=format:"* %s (%h)" $PREV_TAG..HEAD > CHANGELOG.md
          fi
          
          # Print changelog for the deployment
          echo "üìù Deployment changelog for $RELEASE_VERSION:"
          cat CHANGELOG.md
      
      - name: Initialize production stack
        run: bundle exec rake aws:setup_infra
      
      - name: Prepare blue/green deployment
        run: echo "Preparing blue/green deployment for version $RELEASE_VERSION"
      
      - name: Wait for manual approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: abdul-hamid-achik
          minimum-approvals: 1
          issue-title: "Approve traffic switch for release ${{ env.RELEASE_VERSION }}"
          issue-body: |
            Please approve to switch traffic to the new environment for release ${{ env.RELEASE_VERSION }}
            
            ## Changelog:
            ```
            $(cat CHANGELOG.md)
            ```
          exclude-workflow-initiator-as-approver: false

      - name: Switch traffic to new environment
        run: echo "Switching traffic to new environment"
      
      - name: Finalize deployment
        run: bundle exec rake aws:setup_infra
      
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,workflow,job
          text: |
            ${{ job.status == 'success' && 'üîÆ' || '‚ùå' }} *Production Deployment ${{ job.status }}*
            
            *Version:* ${{ env.RELEASE_VERSION }}
            *URL:* https://${{ env.DOMAIN_NAME }}
            
            *Changelog:*
            ```
            $(cat CHANGELOG.md)
            ```
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always() && env.SLACK_WEBHOOK_URL != '' 