name: Automatic Domain Registration

on:
  workflow_dispatch:
    inputs:
      domain:
        description: 'Domain name to register'
        required: true
        default: 'tarotapi.cards'
      
jobs:
  register_domain:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4'
          bundler-cache: true
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'mx-central-1' }}
      
      - name: Check domain availability
        id: check_domain
        run: |
          DOMAIN="${{ github.event.inputs.domain }}"
          RESULT=$(aws route53domains check-domain-availability --domain-name $DOMAIN)
          AVAILABILITY=$(echo $RESULT | jq -r '.Availability')
          echo "::set-output name=availability::$AVAILABILITY"
          echo "Domain availability: $AVAILABILITY"
      
      - name: Fetch domains for contact information
        id: list_domains
        if: steps.check_domain.outputs.availability == 'AVAILABLE'
        run: |
          DOMAINS=$(aws route53domains list-domains)
          DOMAIN_COUNT=$(echo $DOMAINS | jq '.Domains | length')
          echo "::set-output name=domain_count::$DOMAIN_COUNT"
          if [ "$DOMAIN_COUNT" -gt "0" ]; then
            SOURCE_DOMAIN=$(echo $DOMAINS | jq -r '.Domains[0].DomainName')
            echo "::set-output name=source_domain::$SOURCE_DOMAIN"
            echo "Found existing domain to use for contact information: $SOURCE_DOMAIN"
          else
            echo "No existing domains found to use for contact information"
          fi
      
      - name: Register domain with existing contact information
        if: steps.check_domain.outputs.availability == 'AVAILABLE' && steps.list_domains.outputs.domain_count > 0
        run: |
          DOMAIN="${{ github.event.inputs.domain }}"
          SOURCE_DOMAIN="${{ steps.list_domains.outputs.source_domain }}"
          
          # Get contact information from source domain
          DOMAIN_DETAILS=$(aws route53domains get-domain-detail --domain-name $SOURCE_DOMAIN)
          
          # Extract contact information
          echo $DOMAIN_DETAILS | jq '.AdminContact' > admin_contact.json
          echo $DOMAIN_DETAILS | jq '.RegistrantContact' > registrant_contact.json
          echo $DOMAIN_DETAILS | jq '.TechContact' > tech_contact.json
          
          # Register the domain
          aws route53domains register-domain \
            --domain-name $DOMAIN \
            --duration-in-years 1 \
            --auto-renew \
            --admin-contact file://admin_contact.json \
            --registrant-contact file://registrant_contact.json \
            --tech-contact file://tech_contact.json \
            --privacy-protect-admin-contact \
            --privacy-protect-registrant-contact \
            --privacy-protect-tech-contact
            
          echo "Domain registration initiated for $DOMAIN"
      
      - name: Run fully automated domain registration
        if: steps.check_domain.outputs.availability == 'AVAILABLE'
        run: |
          bundle exec rake pulumi:register_domain_fully_automated
        env:
          RAILS_ENV: production
      
      - name: Protect domain
        if: success()
        run: |
          # Wait for registration to process
          echo "Waiting 2 minutes for domain registration to process..."
          sleep 120
          
          # Protect domain from accidental deletion
          bundle exec rake pulumi:protect_domain
        env:
          RAILS_ENV: production
        
      - name: Notify about domain registration status
        if: always()
        run: |
          if [ "${{ steps.check_domain.outputs.availability }}" != "AVAILABLE" ]; then
            echo "Domain ${{ github.event.inputs.domain }} is not available for registration"
          else
            if [ "${{ steps.list_domains.outputs.domain_count }}" -gt "0" ]; then
              echo "Domain registration for ${{ github.event.inputs.domain }} has been initiated"
              echo "The registration process will take up to 3 days to complete"
            else
              echo "No existing domains found to use for contact information"
              echo "Please register the domain manually through the AWS console"
            fi
          fi 