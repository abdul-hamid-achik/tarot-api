name: Security Scan

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * 0' # run weekly on Sunday at midnight

env:
  CI: true
  RAILS_ENV: test
  DISABLE_SPRING: 1
  HEADLESS: true

jobs:
  security-scan:
    name: Rails Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake git curl wget libssl-dev

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4'
          bundler-cache: true

      - name: Bundle install
        run: |
          bundle config set --local path 'vendor/bundle'
          bundle install --jobs 4 --retry 3

      - name: Run Brakeman
        timeout-minutes: 2
        run: bundle exec brakeman -A --no-pager --quiet

      - name: Run Bundler Audit
        timeout-minutes: 2
        run: |
          gem install bundler-audit
          bundle-audit check --no-update

      - name: Check for hardcoded secrets
        timeout-minutes: 2
        run: |
          echo "Checking for potential hardcoded secrets..."
          # Exclude specific files and directories
          ! grep -r --include="*.rb" --include="*.yml" --include="*.erb" \
            --exclude-dir=".git" --exclude-dir="node_modules" --exclude-dir="vendor" \
            --exclude-dir=".cursor" \
            --exclude="**/schema.rb" --exclude="**/routes.rb" --exclude="**/security-scan.yml" \
            "password\|secret\|token\|key" . | grep -v "ENV\|secret.*:" | grep -v "file:"
          
          echo "Checking Docker Compose files for hardcoded secrets..."
          ! grep -r "password\|secret\|key\|token" --include="docker-compose*.yml" . | grep -v "secrets:" | grep -v "file:" || echo "Warning: Potential hardcoded secrets found in docker-compose files"

      - name: Check production security settings
        timeout-minutes: 1
        run: |
          echo "Checking for HTTPS enforcement..."
          if [ -f "config/environments/production.rb" ]; then
            if grep -q "config.force_ssl = true" config/environments/production.rb; then
              echo "✅ HTTPS is enforced in production"
            else
              echo "⚠️ HTTPS is not enforced in production"
            fi
          else
            echo "⚠️ Production environment file not found"
          fi
          
          echo "Checking for protected routes..."
          if [ -d "app/controllers" ]; then
            if grep -r "before_action :authenticate" --include="*.rb" app/controllers/ > /dev/null; then
              echo "✅ Authentication checks found in controllers"
            else
              echo "⚠️ No authentication checks found in controllers"
            fi
          fi
          
          echo "Checking for strong parameters..."
          if [ -d "app/controllers" ]; then
            if grep -r "params.require" --include="*.rb" app/controllers/ > /dev/null; then
              echo "✅ Strong parameters found in controllers"
            else
              echo "⚠️ No strong parameters found in controllers"
            fi
          fi

      - name: Security scan summary
        run: |
          echo "========== Security Scan Summary ==========="
          echo "✓ Brakeman scan completed"
          echo "✓ Bundle-audit scan completed"
          echo "✓ Secret detection scan completed"
          echo "✓ Dockerfile security scan completed"
          echo "Note: This is a basic security scan. Consider a professional security audit for production systems."

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Scan dependencies
        uses: actions/dependency-review-action@v4

  secrets-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Scan for secrets with GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_ENABLE_SUMMARY: true
          GITLEAKS_ENABLE_UPLOAD_ARTIFACT: true
      
      - name: Run Trufflehog scan
        uses: trufflesecurity/trufflehog@v3.88.18
        continue-on-error: true
        with:
          base: ""
          head: "HEAD"
          extra_args: --debug --only-verified
        
      - name: Check for SARIF file and upload if exists
        id: check_sarif
        run: |
          if [ -f "gitleaks.sarif" ]; then
            echo "sarif_exists=true" >> $GITHUB_OUTPUT
          else
            echo "SARIF file not found. Skipping upload."
            echo "sarif_exists=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Upload SARIF file for GitHub Advanced Security
        uses: github/codeql-action/upload-sarif@v3
        if: steps.check_sarif.outputs.sarif_exists == 'true'
        with:
          sarif_file: gitleaks.sarif
          category: secret-scanning

  docker-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Scan Dockerfile
        run: |
          echo "Scanning Dockerfile for security issues..."
          
          # Check if Dockerfile exists
          if [ ! -f "Dockerfile" ]; then
            echo "::error::Dockerfile not found!"
            exit 1
          fi
          
          # Check for USER instruction
          if ! grep -q "USER" Dockerfile; then
            echo "::warning::No USER instruction found in Dockerfile. Container might run as root."
          else
            echo "✅ Dockerfile runs as non-root user"
          fi
          
          # Check for HEALTHCHECK instruction
          if ! grep -q "HEALTHCHECK" Dockerfile; then
            echo "::warning::No HEALTHCHECK instruction found in Dockerfile."
          else
            echo "✅ Dockerfile includes HEALTHCHECK instruction"
          fi
          
          # Check for copying entire directory
          if grep -q "COPY \." Dockerfile; then
            echo "::warning::Copying entire directory may include sensitive files. Consider using .dockerignore."
          fi
          
          echo "Dockerfile scan completed."
          
  infra-scan:
    name: Infrastructure Security Check
    runs-on: ubuntu-latest
    if: false  # Disable this job for now until we have a better implementation
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: mx-central-1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4'
          bundler-cache: true 

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ruby, javascript
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3 