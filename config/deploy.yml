# Name of your application. Used to uniquely configure containers.
service: tarot_api

# Name of the container image.
image: tarot_api:latest

# Deploy to these servers.
servers:
  web:
    hosts:
      # Replace with your actual server IPs or hostnames
      - user@your-server-1.example.com
      - user@your-server-2.example.com
    labels:
      traefik.http.routers.tarot_api.rule: Host(`api.tarotapi.cards`)
      traefik.http.routers.tarot_api.tls: true
      traefik.http.routers.tarot_api.tls.certresolver: letsencrypt

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: api.tarotapi.cards

# Credentials for your image host.
registry:
  # update with your registry details (e.g., Docker Hub, GitHub Container Registry, etc.)
  server: ghcr.io # or docker.io for Docker Hub
  username:
    - KAMAL_REGISTRY_USERNAME
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  clear:
    RAILS_ENV: production
    RAILS_LOG_TO_STDOUT: true
    RAILS_SERVE_STATIC_FILES: true
    APP_NAME: tarot_api
    DB_HOST: db
    DB_NAME: tarot_api_production
    DB_USERNAME: tarot_api
    S3_ENDPOINT: http://minio:9000
    AWS_REGION: us-west-2
    AWS_BUCKET: tarot-api-production
  secret:
    - RAILS_MASTER_KEY
    - DB_PASSWORD
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY
    - OPENAI_API_KEY

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"

# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
volumes:
  - postgres_data:/var/lib/postgresql/data
  - redis_data:/data
  - minio_data:/data

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure the image builder.
builder:
  multiarch: false  # set to true if building for multiple architectures
  args:
    - RAILS_ENV
    - RAILS_MASTER_KEY

# health check configuration matches your docker health check
healthcheck:
  path: /health
  port: 3000
  interval: 10s
  timeout: 5s
  retries: 5

# traefik configuration for ssl and routing
traefik:
  options:
    publish:
      - "443:443"
    volume:
      - "/letsencrypt:/letsencrypt"
  args:
    entryPoints.web.address: ":80"
    entryPoints.websecure.address: ":443"
    certificatesResolvers.letsencrypt.acme.email: "admin@tarotapi.cards"
    certificatesResolvers.letsencrypt.acme.storage: "/letsencrypt/acme.json"
    certificatesResolvers.letsencrypt.acme.httpChallenge.entryPoint: "web"

# accessories for database, cache, and storage
accessories:
  db:
    image: postgres:16-bookworm
    host: localhost
    port: 5432
    env:
      - POSTGRES_PASSWORD
      - POSTGRES_USER
      - POSTGRES_DB
    volumes:
      - postgres_data:/var/lib/postgresql/data
    cmd: postgres -c superuser_reserved_connections=0
  redis:
    image: redis:7-bookworm
    host: localhost
    port: 6379
    volumes:
      - redis_data:/data
    cmd: redis-server --appendonly yes
  minio:
    image: minio/minio:latest
    host: localhost
    ports:
      - "9000:9000"
      - "9001:9001"
    env:
      - MINIO_ROOT_USER
      - MINIO_ROOT_PASSWORD
    volumes:
      - minio_data:/data
    cmd: server /data --console-address ":9001"

# blue-green deployment configuration
rollout:
  version: v2
  strategy: blue-green
  secondary_ratio: 50
  
# canary deployment settings (uncomment to enable)
# canary:
#   steps: 5
#   traffic_shift:
#     method: header
#     header: X-Canary
#     value: true
#   verification:
#     method: health
#     path: /health
#     timeout: 60

# multi-environment configuration
destinations:
  staging:
    hosts:
      - user@staging.tarotapi.cards
    env:
      clear:
        RAILS_ENV: staging
      secret:
        - STAGING_RAILS_MASTER_KEY
  
  production:
    hosts:
      - user@production-1.tarotapi.cards
      - user@production-2.tarotapi.cards
    env:
      clear:
        RAILS_ENV: production
      secret:
        - RAILS_MASTER_KEY
  
  preview:
    hosts:
      - user@preview.tarotapi.cards
    env:
      clear:
        RAILS_ENV: preview
      secret:
        - PREVIEW_RAILS_MASTER_KEY
