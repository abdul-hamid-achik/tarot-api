resources:
  # ECS Task Execution Role (for ECR, CloudWatch Logs)
  ecsTaskExecutionRole:
    type: aws:iam:Role
    properties:
      name: "${app_name}-task-execution-role-${env}"
      assumeRolePolicy: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      managedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      tags:
        Name: "${app_name}-task-execution-role-${env}"
        environment: ${env}
        managed-by: pulumi

  # Policy for accessing SSM parameters
  ssmParameterPolicy:
    type: aws:iam:Policy
    properties:
      name: "${app_name}-ssm-parameter-policy-${env}"
      description: "Policy for accessing SSM parameters"
      policy: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParametersByPath"
              ],
              "Resource": [
                "arn:aws:ssm:${aws:region}:${aws:accountId}:parameter/${env}/*"
              ]
            }
          ]
        }

  # Attach SSM Parameter Policy to Task Execution Role
  ssmParameterPolicyAttachment:
    type: aws:iam:RolePolicyAttachment
    properties:
      role: ${ecsTaskExecutionRole.name}
      policyArn: ${ssmParameterPolicy.arn}

  # ECS Task Role (for application permissions)
  ecsTaskRole:
    type: aws:iam:Role
    properties:
      name: "${app_name}-task-role-${env}"
      assumeRolePolicy: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      tags:
        Name: "${app_name}-task-role-${env}"
        environment: ${env}
        managed-by: pulumi

  # Policy for S3 access
  s3AccessPolicy:
    type: aws:iam:Policy
    properties:
      name: "${app_name}-s3-access-policy-${env}"
      description: "Policy for accessing S3 buckets"
      policy: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListBucket",
                "s3:GetBucketLocation"
              ],
              "Resource": [
                "${appBucket.arn}",
                "${uploadsBucket.arn}"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:DeleteObject",
                "s3:PutObjectAcl"
              ],
              "Resource": [
                "${appBucket.arn}/*",
                "${uploadsBucket.arn}/*"
              ]
            }
          ]
        }

  # Attach S3 Access Policy to Task Role
  s3AccessPolicyAttachment:
    type: aws:iam:RolePolicyAttachment
    properties:
      role: ${ecsTaskRole.name}
      policyArn: ${s3AccessPolicy.arn}

  # Policy for CloudWatch Logs
  cloudwatchLogsPolicy:
    type: aws:iam:Policy
    properties:
      name: "${app_name}-cloudwatch-logs-policy-${env}"
      description: "Policy for CloudWatch Logs"
      policy: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams"
              ],
              "Resource": [
                "arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/ecs/${app_name}-${env}*"
              ]
            }
          ]
        }

  # Attach CloudWatch Logs Policy to Task Role
  cloudwatchLogsPolicyAttachment:
    type: aws:iam:RolePolicyAttachment
    properties:
      role: ${ecsTaskRole.name}
      policyArn: ${cloudwatchLogsPolicy.arn}

  # Policy for SQS (if needed by the application)
  sqsPolicy:
    type: aws:iam:Policy
    properties:
      name: "${app_name}-sqs-policy-${env}"
      description: "Policy for SQS queues"
      policy: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "sqs:SendMessage",
                "sqs:ReceiveMessage",
                "sqs:DeleteMessage",
                "sqs:GetQueueAttributes"
              ],
              "Resource": [
                "arn:aws:sqs:${aws:region}:${aws:accountId}:${app_name}-*-${env}"
              ]
            }
          ]
        }

  # Attach SQS Policy to Task Role
  sqsPolicyAttachment:
    type: aws:iam:RolePolicyAttachment
    properties:
      role: ${ecsTaskRole.name}
      policyArn: ${sqsPolicy.arn}

outputs:
  ecsTaskExecutionRoleArn:
    value: ${ecsTaskExecutionRole.arn}
  ecsTaskRoleArn:
    value: ${ecsTaskRole.arn} 