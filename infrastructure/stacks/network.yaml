resources:
  # VPC for all resources
  vpc:
    type: aws:ec2:Vpc
    properties:
      cidrBlock: "10.0.0.0/16"
      enableDnsHostnames: true
      enableDnsSupport: true
      tags:
        Name: ${app_name}-vpc-${env}
        environment: ${env}
        managed-by: pulumi

  # Public Subnets (for load balancer)
  publicSubnet1:
    type: aws:ec2:Subnet
    properties:
      vpcId: ${vpc.id}
      cidrBlock: "10.0.1.0/24"
      availabilityZone: "${aws:region}a"
      mapPublicIpOnLaunch: true
      tags:
        Name: ${app_name}-public-subnet-1-${env}
        environment: ${env}
        managed-by: pulumi

  publicSubnet2:
    type: aws:ec2:Subnet
    properties:
      vpcId: ${vpc.id}
      cidrBlock: "10.0.2.0/24"
      availabilityZone: "${aws:region}b"
      mapPublicIpOnLaunch: true
      tags:
        Name: ${app_name}-public-subnet-2-${env}
        environment: ${env}
        managed-by: pulumi

  # Private Subnets (for application, database, and cache)
  privateSubnet1:
    type: aws:ec2:Subnet
    properties:
      vpcId: ${vpc.id}
      cidrBlock: "10.0.3.0/24"
      availabilityZone: "${aws:region}a"
      tags:
        Name: ${app_name}-private-subnet-1-${env}
        environment: ${env}
        managed-by: pulumi

  privateSubnet2:
    type: aws:ec2:Subnet
    properties:
      vpcId: ${vpc.id}
      cidrBlock: "10.0.4.0/24"
      availabilityZone: "${aws:region}b"
      tags:
        Name: ${app_name}-private-subnet-2-${env}
        environment: ${env}
        managed-by: pulumi

  # Internet Gateway
  internetGateway:
    type: aws:ec2:InternetGateway
    properties:
      vpcId: ${vpc.id}
      tags:
        Name: ${app_name}-igw-${env}
        environment: ${env}
        managed-by: pulumi

  # Route Table for Public Subnets
  publicRouteTable:
    type: aws:ec2:RouteTable
    properties:
      vpcId: ${vpc.id}
      tags:
        Name: ${app_name}-public-rt-${env}
        environment: ${env}
        managed-by: pulumi

  # Route to Internet Gateway
  publicRoute:
    type: aws:ec2:Route
    properties:
      routeTableId: ${publicRouteTable.id}
      destinationCidrBlock: "0.0.0.0/0"
      gatewayId: ${internetGateway.id}

  # Associate Route Table with Public Subnets
  publicRouteTableAssociation1:
    type: aws:ec2:RouteTableAssociation
    properties:
      routeTableId: ${publicRouteTable.id}
      subnetId: ${publicSubnet1.id}

  publicRouteTableAssociation2:
    type: aws:ec2:RouteTableAssociation
    properties:
      routeTableId: ${publicRouteTable.id}
      subnetId: ${publicSubnet2.id}

  # NAT Gateway for private subnets
  natGatewayEip:
    type: aws:ec2:Eip
    properties:
      vpc: true
      tags:
        Name: ${app_name}-nat-eip-${env}
        environment: ${env}
        managed-by: pulumi

  # NAT Gateway for private subnets - Use a single NAT Gateway to save costs
  natGateway:
    type: aws:ec2:NatGateway
    properties:
      allocationId: ${natGatewayEip.id}
      subnetId: ${publicSubnet1.id}
      tags:
        Name: ${app_name}-nat-${env}
        environment: ${env}
        managed-by: pulumi

  # Route Table for Private Subnets
  privateRouteTable:
    type: aws:ec2:RouteTable
    properties:
      vpcId: ${vpc.id}
      tags:
        Name: ${app_name}-private-rt-${env}
        environment: ${env}
        managed-by: pulumi

  # Route to NAT Gateway
  privateRoute:
    type: aws:ec2:Route
    properties:
      routeTableId: ${privateRouteTable.id}
      destinationCidrBlock: "0.0.0.0/0"
      natGatewayId: ${natGateway.id}

  # Associate Route Table with Private Subnets
  privateRouteTableAssociation1:
    type: aws:ec2:RouteTableAssociation
    properties:
      routeTableId: ${privateRouteTable.id}
      subnetId: ${privateSubnet1.id}

  privateRouteTableAssociation2:
    type: aws:ec2:RouteTableAssociation
    properties:
      routeTableId: ${privateRouteTable.id}
      subnetId: ${privateSubnet2.id}

  # Security Group for Load Balancer
  albSecurityGroup:
    type: aws:ec2:SecurityGroup
    properties:
      vpcId: ${vpc.id}
      description: "Security group for ALB"
      ingress:
        - protocol: "tcp"
          fromPort: 80
          toPort: 80
          cidrBlocks: ["0.0.0.0/0"]
        - protocol: "tcp"
          fromPort: 443
          toPort: 443
          cidrBlocks: ["0.0.0.0/0"]
      egress:
        - protocol: "-1"
          fromPort: 0
          toPort: 0
          cidrBlocks: ["0.0.0.0/0"]
      tags:
        Name: ${app_name}-alb-sg-${env}
        environment: ${env}
        managed-by: pulumi

  # Security Group for App (ECS Fargate)
  appSecurityGroup:
    type: aws:ec2:SecurityGroup
    properties:
      vpcId: ${vpc.id}
      description: "Security group for application"
      ingress:
        - protocol: "tcp"
          fromPort: 3000
          toPort: 3000
          securityGroups: ["${albSecurityGroup.id}"]
      egress:
        - protocol: "-1"
          fromPort: 0
          toPort: 0
          cidrBlocks: ["0.0.0.0/0"]
      tags:
        Name: ${app_name}-app-sg-${env}
        environment: ${env}
        managed-by: pulumi

  # Security Group for Database
  dbSecurityGroup:
    type: aws:ec2:SecurityGroup
    properties:
      vpcId: ${vpc.id}
      description: "Security group for database"
      ingress:
        - protocol: "tcp"
          fromPort: 5432
          toPort: 5432
          securityGroups: ["${appSecurityGroup.id}"]
      egress:
        - protocol: "-1"
          fromPort: 0
          toPort: 0
          cidrBlocks: ["0.0.0.0/0"]
      tags:
        Name: ${app_name}-db-sg-${env}
        environment: ${env}
        managed-by: pulumi

  # Security Group for Redis Cache
  cacheSecurityGroup:
    type: aws:ec2:SecurityGroup
    properties:
      vpcId: ${vpc.id}
      description: "Security group for Redis cache"
      ingress:
        - protocol: "tcp"
          fromPort: 6379
          toPort: 6379
          securityGroups: ["${appSecurityGroup.id}"]
      egress:
        - protocol: "-1"
          fromPort: 0
          toPort: 0
          cidrBlocks: ["0.0.0.0/0"]
      tags:
        Name: ${app_name}-cache-sg-${env}
        environment: ${env}
        managed-by: pulumi

outputs:
  vpcId:
    value: ${vpc.id}
  publicSubnetIds:
    value: ["${publicSubnet1.id}", "${publicSubnet2.id}"]
  privateSubnetIds:
    value: ["${privateSubnet1.id}", "${privateSubnet2.id}"]
  albSecurityGroupId:
    value: ${albSecurityGroup.id}
  appSecurityGroupId:
    value: ${appSecurityGroup.id}
  dbSecurityGroupId:
    value: ${dbSecurityGroup.id}
  cacheSecurityGroupId:
    value: ${cacheSecurityGroup.id} 