resources:
  # Alternative domain registration - marked as "protect" to prevent accidental deletion
  altDomainRegistration:
    type: pulumi:providers:command
    options:
      protect: true # This prevents deletion when destroying the stack
    properties:
      create: |
        #!/bin/bash
        set -e
        
        # Check if domain is already registered
        if aws route53domains get-domain-detail --domain-name tarot.cards &> /dev/null; then
          echo "Domain tarot.cards is already registered"
          echo '{"status": "existing", "domainName": "tarot.cards"}' 
          exit 0
        fi
        
        # Find existing domains to reuse contact information
        DOMAINS=$(aws route53domains list-domains)
        if [ $(echo $DOMAINS | jq '.Domains | length') -eq 0 ]; then
          echo "No existing domains found to reuse contact information"
          echo '{"status": "error", "message": "No existing domains found"}' 
          exit 1
        fi
        
        # Use the first domain as source for contact information
        SOURCE_DOMAIN=$(echo $DOMAINS | jq -r '.Domains[0].DomainName')
        echo "Found existing domain: $SOURCE_DOMAIN"
        
        # Get detailed information about the source domain
        DOMAIN_DETAILS=$(aws route53domains get-domain-detail --domain-name $SOURCE_DOMAIN)
        
        # Extract contact information
        echo $DOMAIN_DETAILS | jq '.AdminContact' > admin_contact.json
        echo $DOMAIN_DETAILS | jq '.RegistrantContact' > registrant_contact.json
        echo $DOMAIN_DETAILS | jq '.TechContact' > tech_contact.json
        
        # Check availability
        AVAILABILITY=$(aws route53domains check-domain-availability --domain-name tarot.cards | jq -r '.Availability')
        if [ "$AVAILABILITY" != "AVAILABLE" ]; then
          echo "Domain tarot.cards is not available for registration (status: $AVAILABILITY)"
          echo '{"status": "unavailable", "message": "Domain not available"}' 
          exit 1
        fi
        
        # Register domain with existing contact information
        aws route53domains register-domain \
          --domain-name tarot.cards \
          --duration-in-years 1 \
          --auto-renew \
          --admin-contact file://admin_contact.json \
          --registrant-contact file://registrant_contact.json \
          --tech-contact file://tech_contact.json \
          --privacy-protect-admin-contact \
          --privacy-protect-registrant-contact \
          --privacy-protect-tech-contact
          
        # Clean up
        rm admin_contact.json registrant_contact.json tech_contact.json
        
        # Return the domain name
        echo '{"status": "registered", "domainName": "tarot.cards"}' 
        
      delete: |
        #!/bin/bash
        # This will NOT delete the domain, regardless of the command
        # We intentionally protect domains from deletion
        echo "Domain protection active: tarot.cards will NOT be deleted"
        echo "To delete a domain, you must do it manually through the AWS console"
        exit 0
      
      # This will run on updates and checks
      update: |
        #!/bin/bash
        # Just protect domain from transfer and ensure auto-renew
        aws route53domains enable-domain-transfer-lock --domain-name tarot.cards || true
        aws route53domains enable-domain-auto-renew --domain-name tarot.cards || true
        echo '{"status": "protected", "domainName": "tarot.cards"}' 

  # Alternative domain protection policy
  altDomainProtectionPolicy:
    type: aws:iam:Policy
    options:
      protect: true # Protected from accidental deletion
    properties:
      name: protect-tarot-cards-domain
      description: "Prevents accidental deletion of tarot.cards domain"
      policy: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Deny",
              "Action": [
                "route53:DeleteHostedZone",
                "route53domains:DeleteDomain"
              ],
              "Resource": "*",
              "Condition": {
                "StringLike": {
                  "aws:ResourceTag/DomainName": "tarot.cards"
                }
              }
            }
          ]
        }

  # DNS configuration for alternative domain
  altDnsZone:
    type: aws:route53:Zone
    options:
      protect: true # Protected from accidental deletion
    properties:
      name: tarot.cards
      comment: "managed by pulumi for ${tarotapi:projectName}"
      tags:
        Name: tarot.cards
        Project: ${tarotapi:projectName}
        Environment: ${tarotapi:environment}
        DomainName: tarot.cards
  
  # Certificate for alternative domain
  altSslCertificate:
    type: aws:acm:Certificate
    properties:
      domainName: tarot.cards
      validationMethod: DNS
      subjectAlternativeNames: [
        "*.tarot.cards"
      ]
      tags:
        Name: ${tarotapi:projectName}-${tarotapi:environment}-alt-certificate
        Project: ${tarotapi:projectName}
        Environment: ${tarotapi:environment}
  
  # Validation records for alternative domain certificate
  altCertificateValidation:
    type: aws:route53:Record
    properties:
      name: ${altSslCertificate.domainValidationOptions[0].resourceRecordName}
      zoneId: ${altDnsZone.zoneId}
      type: ${altSslCertificate.domainValidationOptions[0].resourceRecordType}
      records: [${altSslCertificate.domainValidationOptions[0].resourceRecordValue}]
      ttl: 60
  
  # Wait for certificate validation
  altCertificateValidationCompletion:
    type: aws:acm:CertificateValidation
    properties:
      certificateArn: ${altSslCertificate.arn}
      validationRecordFqdns: [${altCertificateValidation.fqdn}]
  
  # Redirect from alternative domain to main domain
  # This will redirect tarot.cards to tarotapi.cards
  redirectRecord:
    type: aws:route53:Record
    properties:
      zoneId: ${altDnsZone.zoneId}
      name: tarot.cards
      type: A
      aliases:
        - name: ${apiAlb.dnsName}  # Use same ALB as primary domain
          zoneId: ${apiAlb.zoneId}
          evaluateTargetHealth: true

outputs:
  altRegistrationStatus: ${altDomainRegistration.status}
  altDnsZoneId: ${altDnsZone.zoneId}
  altDnsNameServers: ${altDnsZone.nameServers}
  altCertificateArn: ${altSslCertificate.arn}
  altValidatedCertificateArn: ${altCertificateValidationCompletion.certificateArn}

notes: |
  # alternative domain registration information
  
  This stack handles automatic registration and management of tarot.cards alongside tarotapi.cards.
  
  The configuration:
  1. Automatically registers tarot.cards if it's not already registered
  2. Reuses contact information from any existing domain in your AWS account
  3. Configures redirect from tarot.cards to tarotapi.cards (primary domain)
  4. Protects the domain from accidental deletion
  5. Enables privacy protection and auto-renewal
  
  Both tarotapi.cards and tarot.cards are fully protected by:
  1. The "protect: true" option in Pulumi resources
  2. IAM policies that prevent deletion
  3. Auto-renewal settings
  4. Domain transfer locks
  
  The domain will never be deleted when destroying infrastructure. 