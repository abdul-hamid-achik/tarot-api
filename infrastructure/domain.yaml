resources:
  # Domain registration - marked as "protect" to prevent accidental deletion
  domainRegistration:
    type: pulumi:providers:command
    options:
      protect: true # This prevents deletion when destroying the stack
    properties:
      create: |
        #!/bin/bash
        set -e
        
        # Check if domain is already registered
        if aws route53domains get-domain-detail --domain-name ${tarotapi:domain} &> /dev/null; then
          echo "Domain ${tarotapi:domain} is already registered"
          echo '{"status": "existing", "domainName": "'${tarotapi:domain}'"}' 
          exit 0
        fi
        
        # Find existing domains to reuse contact information
        DOMAINS=$(aws route53domains list-domains)
        if [ $(echo $DOMAINS | jq '.Domains | length') -eq 0 ]; then
          echo "No existing domains found to reuse contact information"
          echo '{"status": "error", "message": "No existing domains found"}' 
          exit 1
        fi
        
        # Use the first domain as source for contact information
        SOURCE_DOMAIN=$(echo $DOMAINS | jq -r '.Domains[0].DomainName')
        echo "Found existing domain: $SOURCE_DOMAIN"
        
        # Get detailed information about the source domain
        DOMAIN_DETAILS=$(aws route53domains get-domain-detail --domain-name $SOURCE_DOMAIN)
        
        # Extract contact information
        echo $DOMAIN_DETAILS | jq '.AdminContact' > admin_contact.json
        echo $DOMAIN_DETAILS | jq '.RegistrantContact' > registrant_contact.json
        echo $DOMAIN_DETAILS | jq '.TechContact' > tech_contact.json
        
        # Check availability
        AVAILABILITY=$(aws route53domains check-domain-availability --domain-name ${tarotapi:domain} | jq -r '.Availability')
        if [ "$AVAILABILITY" != "AVAILABLE" ]; then
          echo "Domain ${tarotapi:domain} is not available for registration (status: $AVAILABILITY)"
          echo '{"status": "unavailable", "message": "Domain not available"}' 
          exit 1
        fi
        
        # Register domain with existing contact information
        aws route53domains register-domain \
          --domain-name ${tarotapi:domain} \
          --duration-in-years 1 \
          --auto-renew \
          --admin-contact file://admin_contact.json \
          --registrant-contact file://registrant_contact.json \
          --tech-contact file://tech_contact.json \
          --privacy-protect-admin-contact \
          --privacy-protect-registrant-contact \
          --privacy-protect-tech-contact
          
        # Clean up
        rm admin_contact.json registrant_contact.json tech_contact.json
        
        # Return the domain name
        echo '{"status": "registered", "domainName": "'${tarotapi:domain}'"}' 
        
      delete: |
        #!/bin/bash
        # This will NOT delete the domain, regardless of the command
        # We intentionally protect domains from deletion
        echo "Domain protection active: ${tarotapi:domain} will NOT be deleted"
        echo "To delete a domain, you must do it manually through the AWS console"
        exit 0
      
      # This will run on updates and checks
      update: |
        #!/bin/bash
        # Just protect domain from transfer and ensure auto-renew
        aws route53domains enable-domain-transfer-lock --domain-name ${tarotapi:domain} || true
        aws route53domains enable-domain-auto-renew --domain-name ${tarotapi:domain} || true
        echo '{"status": "protected", "domainName": "'${tarotapi:domain}'"}' 

  # Domain protection policy - this is separate to ensure it exists
  domainProtectionPolicy:
    type: aws:iam:Policy
    options:
      protect: true # Protected from accidental deletion
    properties:
      name: protect-${tarotapi:domain}-domain
      description: "Prevents accidental deletion of ${tarotapi:domain} domain"
      policy: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Deny",
              "Action": [
                "route53:DeleteHostedZone",
                "route53domains:DeleteDomain"
              ],
              "Resource": "*",
              "Condition": {
                "StringLike": {
                  "aws:ResourceTag/DomainName": "${tarotapi:domain}"
                }
              }
            }
          ]
        }

# The rest of your existing DNS configuration follows
  # hosted zone for the domain (will be created automatically if the domain is registered through aws)
  dnsZone:
    type: aws:route53:Zone
    options:
      protect: true # Protected from accidental deletion
    properties:
      name: ${tarotapi:domain}
      comment: "managed by pulumi for ${tarotapi:projectName}"
      tags:
        Name: ${tarotapi:domain}
        Project: ${tarotapi:projectName}
        Environment: ${tarotapi:environment}
        DomainName: ${tarotapi:domain}
  
  # dns records for main application (api endpoint)
  apiRecord:
    type: aws:route53:Record
    properties:
      zoneId: ${dnsZone.zoneId}
      name: ${tarotapi:environment == "production" 
        ? "${tarotapi:domain}" 
        : "${tarotapi:environment == "preview" 
            ? "preview-${tarotapi:previewName}.${tarotapi:domain}" 
            : "${tarotapi:environment}.${tarotapi:domain}"}"}
      type: A
      aliases:
        - name: ${apiAlb.dnsName}
          zoneId: ${apiAlb.zoneId}
          evaluateTargetHealth: true
  
  # dns records for cdn (images and assets)
  cdnRecord:
    type: aws:route53:Record
    properties:
      zoneId: ${dnsZone.zoneId}
      name: ${tarotapi:environment == "production" 
        ? "cdn.${tarotapi:domain}" 
        : "${tarotapi:environment == "preview" 
            ? "cdn-preview-${tarotapi:previewName}.${tarotapi:domain}" 
            : "cdn-${tarotapi:environment}.${tarotapi:domain}"}"}
      type: A
      aliases:
        - name: ${storage.cdnDomainName}
          zoneId: CLOUDFRONT_HOSTED_ZONE_ID  # cloudfront has a fixed zone id
          evaluateTargetHealth: false
  
  # acm certificate for ssl
  sslCertificate:
    type: aws:acm:Certificate
    properties:
      domainName: ${tarotapi:domain}
      validationMethod: DNS
      subjectAlternativeNames: [
        "*.${tarotapi:domain}"
      ]
      tags:
        Name: ${tarotapi:projectName}-${tarotapi:environment}-certificate
        Project: ${tarotapi:projectName}
        Environment: ${tarotapi:environment}
  
  # validation records for certificate
  certificateValidation:
    type: aws:route53:Record
    properties:
      name: ${sslCertificate.domainValidationOptions[0].resourceRecordName}
      zoneId: ${dnsZone.zoneId}
      type: ${sslCertificate.domainValidationOptions[0].resourceRecordType}
      records: [${sslCertificate.domainValidationOptions[0].resourceRecordValue}]
      ttl: 60
  
  # wait for certificate validation
  certificateValidationCompletion:
    type: aws:acm:CertificateValidation
    properties:
      certificateArn: ${sslCertificate.arn}
      validationRecordFqdns: [${certificateValidation.fqdn}]

outputs:
  registrationStatus: ${domainRegistration.status}
  dnsZoneId: ${dnsZone.zoneId}
  dnsNameServers: ${dnsZone.nameServers}
  apiDns: ${apiRecord.name}
  cdnDns: ${cdnRecord.name}
  certificateArn: ${sslCertificate.arn}
  validatedCertificateArn: ${certificateValidationCompletion.certificateArn}

notes: |
  # domain registration information
  
  This stack now handles domain registration automatically as part of infrastructure deployment.
  
  Key features:
  
  1. Domain registration is handled in the following way:
     - Will automatically register the domain (tarotapi.cards) if it's not already registered
     - Reuses contact information from any existing domain in your AWS account
     - Automatically enables privacy protection and auto-renewal
  
  2. Domain protection:
     - Domains are protected from accidental deletion in Pulumi (protect: true flag)
     - An IAM policy is created to prevent deletion through AWS console/CLI
     - Auto-renewal is enabled to prevent expiration
     - Domain transfer lock is enabled to prevent unauthorized transfers
  
  3. If no existing domains are found:
     - Stack deployment will fail with a clear error message
     - You'll need to register a domain manually first, then subsequent domains will reuse that contact info
  
  The domain will never be deleted when you destroy other resources in this stack. 