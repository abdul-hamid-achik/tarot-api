resources:
  # EBS volume for Ollama models
  ollamaVolume:
    type: aws:ebs:Volume
    properties:
      availabilityZone: ${availabilityZones[0]}
      size: 100  # 100 GB for model storage
      type: gp3  # General purpose SSD with good balance of price and performance
      encrypted: true
      tags:
        Name: tarot-ollama-models-${environment}
        Environment: ${environment}
        Service: llm
        ManagedBy: pulumi

  # Security group for Ollama service
  ollamaSecurityGroup:
    type: aws:ec2:SecurityGroup
    properties:
      vpcId: ${vpc.id}
      description: "Security group for Ollama LLM service"
      ingress:
        - protocol: tcp
          fromPort: 11434
          toPort: 11434
          securityGroups: [${apiSecurityGroup.id}]  # Allow API to connect to Ollama
          description: "Allow API to access Ollama API port"
      egress:
        - protocol: -1
          fromPort: 0
          toPort: 0
          cidrBlocks: ["0.0.0.0/0"]
          description: "Allow all outbound traffic"
      tags:
        Name: tarot-ollama-sg-${environment}
        Environment: ${environment}
        Service: llm
        ManagedBy: pulumi

  # ECS Task Definition for Ollama
  ollamaTaskDefinition:
    type: aws:ecs:TaskDefinition
    properties:
      family: "tarot-ollama-${environment}"
      networkMode: awsvpc
      requiresCompatibilities: ["FARGATE"]
      cpu: "2048"  # 2 vCPU
      memory: "8192"  # 8GB RAM
      executionRoleArn: ${ecsTaskExecutionRole.arn}
      taskRoleArn: ${ecsTaskRole.arn}
      volumes:
        - name: ollama-data
          efsVolumeConfiguration:
            fileSystemId: ${ollamaEfs.id}
            rootDirectory: "/"
      containerDefinitions: ${toJson([{
        name: "ollama",
        image: "ollama/ollama:latest",
        essential: true,
        portMappings: [{
          containerPort: 11434,
          hostPort: 11434,
          protocol: "tcp"
        }],
        environment: [
          {
            name: "OLLAMA_HOST",
            value: "0.0.0.0"
          }
        ],
        mountPoints: [{
          sourceVolume: "ollama-data",
          containerPath: "/root/.ollama",
          readOnly: false
        }],
        logConfiguration: {
          logDriver: "awslogs",
          options: {
            "awslogs-group": ${ollamaLogGroup.name},
            "awslogs-region": ${aws:region},
            "awslogs-stream-prefix": "ollama"
          }
        },
        healthCheck: {
          command: ["CMD-SHELL", "curl -f http://localhost:11434/api/version || exit 1"],
          interval: 30,
          timeout: 5,
          retries: 3,
          startPeriod: 60
        }
      }])}

  # EFS File System for Ollama data (better for persistent storage across container restarts)
  ollamaEfs:
    type: aws:efs:FileSystem
    properties:
      encrypted: true
      performanceMode: generalPurpose
      throughputMode: bursting
      tags:
        Name: tarot-ollama-efs-${environment}
        Environment: ${environment}
        Service: llm
        ManagedBy: pulumi

  # EFS Mount Targets (one per subnet)
  ollamaEfsMountTargets:
    type: aws:efs:MountTarget
    properties:
      fileSystemId: ${ollamaEfs.id}
      subnetId: ${privateSubnets[0].id}
      securityGroups: [${ollamaEfsSecurityGroup.id}]

  # Security Group for EFS
  ollamaEfsSecurityGroup:
    type: aws:ec2:SecurityGroup
    properties:
      vpcId: ${vpc.id}
      description: "Security group for Ollama EFS"
      ingress:
        - protocol: tcp
          fromPort: 2049
          toPort: 2049
          securityGroups: [${ollamaSecurityGroup.id}]
          description: "Allow NFS traffic from Ollama containers"
      tags:
        Name: tarot-ollama-efs-sg-${environment}
        Environment: ${environment}
        Service: llm
        ManagedBy: pulumi

  # CloudWatch Log Group for Ollama
  ollamaLogGroup:
    type: aws:cloudwatch:LogGroup
    properties:
      name: "/aws/ecs/tarot-ollama-${environment}"
      retentionInDays: 30
      tags:
        Environment: ${environment}
        Service: llm
        ManagedBy: pulumi

  # ECS Service for Ollama
  ollamaService:
    type: aws:ecs:Service
    properties:
      name: "tarot-ollama-${environment}"
      cluster: ${ecsCluster.arn}
      taskDefinition: ${ollamaTaskDefinition.arn}
      desiredCount: 1
      launchType: "FARGATE"
      networkConfiguration:
        assignPublicIp: false
        subnets: ${privateSubnets.*.id}
        securityGroups: [${ollamaSecurityGroup.id}]
      deploymentConfiguration:
        maximumPercent: 200
        minimumHealthyPercent: 100
      tags:
        Environment: ${environment}
        Service: llm
        ManagedBy: pulumi

outputs:
  ollamaEndpoint:
    value: "http://ollama.service.internal:11434"
    description: "Internal endpoint for Ollama service"
  ollamaServiceName:
    value: ${ollamaService.name}
    description: "ECS Service name for Ollama"
  ollamaEfsId:
    value: ${ollamaEfs.id}
    description: "EFS File System ID for Ollama data" 