name: tarotapi
runtime: yaml
description: Infrastructure for the Tarot API project

config:
  aws:region: mx-central-1
  tarotapi:environment: development
  tarotapi:projectName: tarotapi
  tarotapi:repoName: abdul-hamid-achik/tarotapi
  tarotapi:domainName: tarotapi.cards
  tarotapi:altDomainName: tarot.cards
  tarotapi:ollamaApiKey: ""
  tarotapi:openaiApiKey: ""
  tarotapi:enableCostSaving: true

variables:
  # Network Configuration
  vpcCidr: "10.0.0.0/16"
  publicSubnetEastCidr: "10.0.3.0/24"
  publicSubnetWestCidr: "10.0.4.0/24"
  
  # Instance Types - Cost-effective but scalable options
  dbInstanceClass: "db.t4g.micro"  # ARM-based for better price/performance
  cacheInstanceClass: "cache.t4g.micro"  # ARM-based for better price/performance
  
  # ECS Configuration - Minimal but sufficient for startup
  ecsTaskCpu: "256"
  ecsTaskMemory: "512"
  
  # Tags
  commonTags:
    Project: "${tarotapi:projectName}"
    Environment: "${pulumi.stack}"
    ManagedBy: "pulumi"

resources:
  vpc:
    type: "aws:ec2:Vpc"
    properties:
      cidrBlock: "${vpcCidr}"
      enableDnsHostnames: true
      enableDnsSupport: true
      tags:
        Name: "${tarotapi:projectName}-vpc-${pulumi.stack}"
        Project: "${tarotapi:projectName}"
        Environment: "${pulumi.stack}"
        ManagedBy: "pulumi"

  publicSubnetEast:
    type: "aws:ec2:Subnet"
    properties:
      vpcId: "${vpc.id}"
      cidrBlock: "${publicSubnetEastCidr}"
      availabilityZone: "mx-central-1a"
      mapPublicIpOnLaunch: true
      tags:
        Name: "${tarotapi:projectName}-public-subnet-east-${pulumi.stack}"
        Project: "${tarotapi:projectName}"
        Environment: "${pulumi.stack}"
        ManagedBy: "pulumi"

  publicSubnetWest:
    type: "aws:ec2:Subnet"
    properties:
      vpcId: "${vpc.id}"
      cidrBlock: "${publicSubnetWestCidr}"
      availabilityZone: "mx-central-1b"
      mapPublicIpOnLaunch: true
      tags:
        Name: "${tarotapi:projectName}-public-subnet-west-${pulumi.stack}"
        Project: "${tarotapi:projectName}"
        Environment: "${pulumi.stack}"
        ManagedBy: "pulumi"

  dbSubnetGroup:
    type: "aws:rds:SubnetGroup"
    properties:
      name: "${tarotapi:projectName}-db-subnet-${pulumi.stack}"
      subnetIds:
        - "${publicSubnetEast.id}"
        - "${publicSubnetWest.id}"
      description: "Subnet group for RDS instances"
      tags:
        Name: "${tarotapi:projectName}-db-subnet-group-${pulumi.stack}"
        Project: "${tarotapi:projectName}"
        Environment: "${pulumi.stack}"
        ManagedBy: "pulumi"

  dbPassword:
    type: "random:RandomString"
    properties:
      length: 16
      special: false
      upper: true
      number: true

  dbInstance:
    type: "aws:rds:Instance"
    properties:
      identifier: "${tarotapi:projectName}-db-${pulumi.stack}"
      engine: "postgres"
      engineVersion: "14.13"
      instanceClass: "${dbInstanceClass}"
      allocatedStorage: 20
      dbSubnetGroupName: "${dbSubnetGroup.name}"
      username: "tarotapi"
      password: "${dbPassword.result}"
      skipFinalSnapshot: true
      backupRetentionPeriod: 7
      autoMinorVersionUpgrade: true
      performanceInsightsEnabled: false
      tags:
        Name: "${tarotapi:projectName}-db-${pulumi.stack}"
        Project: "${tarotapi:projectName}"
        Environment: "${pulumi.stack}"
        ManagedBy: "pulumi"

  cacheSubnetGroup:
    type: "aws:elasticache:SubnetGroup"
    properties:
      name: "${tarotapi:projectName}-cache-subnet-${pulumi.stack}"
      description: "Subnet group for ElastiCache instances"
      subnetIds:
        - "${publicSubnetEast.id}"
        - "${publicSubnetWest.id}"
      tags:
        Name: "${tarotapi:projectName}-cache-subnet-group-${pulumi.stack}"
        Project: "${tarotapi:projectName}"
        Environment: "${pulumi.stack}"
        ManagedBy: "pulumi"

  cacheCluster:
    type: "aws:elasticache:Cluster"
    properties:
      clusterId: "${tarotapi:projectName}-redis-${pulumi.stack}"
      engine: "redis"
      nodeType: "${cacheInstanceClass}"
      numCacheNodes: 1
      parameterGroupName: "default.redis7"
      port: 6379
      subnetGroupName: "${cacheSubnetGroup.name}"
      securityGroupIds: []  # We'll configure this later
      applyImmediately: true
      autoMinorVersionUpgrade: true
      tags:
        Name: "${tarotapi:projectName}-redis-${pulumi.stack}"
        Project: "${tarotapi:projectName}"
        Environment: "${pulumi.stack}"
        ManagedBy: "pulumi"

  s3Bucket:
    type: "aws:s3:Bucket"
    properties:
      bucket: "${tarotapi:projectName}-storage-${pulumi.stack}"
      acl: "private"
      versioning:
        enabled: true
      lifecycleRules:
        - enabled: true
          transitions:
            - days: 30
              storageClass: "STANDARD_IA"
            - days: 90
              storageClass: "GLACIER"
      tags:
        Name: "${tarotapi:projectName}-storage-${pulumi.stack}"
        Project: "${tarotapi:projectName}"
        Environment: "${pulumi.stack}"
        ManagedBy: "pulumi"

  dnsZone:
    type: "aws:route53:Zone"
    properties:
      name: "${tarotapi:domainName}"
      tags:
        Name: "${tarotapi:projectName}-dns-zone-${pulumi.stack}"
        Project: "${tarotapi:projectName}"
        Environment: "${pulumi.stack}"
        ManagedBy: "pulumi"

  certificate:
    type: "aws:acm:Certificate"
    properties:
      domainName: "${tarotapi:domainName}"
      validationMethod: "DNS"
      subjectAlternativeNames:
        - "${tarotapi:altDomainName}"
      tags:
        Name: "${tarotapi:projectName}-cert-${pulumi.stack}"
        Project: "${tarotapi:projectName}"
        Environment: "${pulumi.stack}"
        ManagedBy: "pulumi"

  ecsCluster:
    type: "aws:ecs:Cluster"
    properties:
      name: "${tarotapi:projectName}-cluster-${pulumi.stack}"
      settings:
        - name: "containerInsights"
          value: "disabled"
      tags:
        Name: "${tarotapi:projectName}-cluster-${pulumi.stack}"
        Project: "${tarotapi:projectName}"
        Environment: "${pulumi.stack}"
        ManagedBy: "pulumi"

  ecsTaskExecutionRole:
    type: "aws:iam:Role"
    properties:
      assumeRolePolicy: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": "ecs-tasks.amazonaws.com" },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      managedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      tags:
        Name: "${tarotapi:projectName}-ecs-exec-role-${pulumi.stack}"
        Project: "${tarotapi:projectName}"
        Environment: "${pulumi.stack}"
        ManagedBy: "pulumi"

  containerRepository:
    type: "aws:ecr:Repository"
    properties:
      name: "${tarotapi:projectName}-${pulumi.stack}"
      imageScanningConfiguration:
        scanOnPush: true
      imageTagMutability: "MUTABLE"
      tags:
        Name: "${tarotapi:projectName}-ecr-${pulumi.stack}"
        Project: "${tarotapi:projectName}"
        Environment: "${pulumi.stack}"
        ManagedBy: "pulumi"

outputs:
  dbEndpoint:
    value: "postgres-database-endpoint"
  redisEndpoint:
    value: "redis-cache-endpoint"
  ecsClusterId:
    value: "ecs-cluster-id"
  containerRegistry:
    value: "registry.ecr.aws.com"
  s3BucketName:
    value: "tarotapi-storage-bucket"
