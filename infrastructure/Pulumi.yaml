name: tarotapi
runtime: yaml
description: Infrastructure for the Tarot API project

# Import the ESC environment
environment:
  - abdul-hamid-achik/default/tarotapi-esc

# Configure environment variables from ESC
environmentVariables:
  AWS_ACCESS_KEY_ID:
    fn::env::get: AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY:
    fn::env::get: AWS_SECRET_ACCESS_KEY
  AWS_REGION: mx-central-1

config:
  aws:region: mx-central-1
  # Project configuration
  tarotapi:projectName: tarotapi
  tarotapi:environment: production
  tarotapi:repoName: abdul-hamid-achik/tarotapi
  tarotapi:domainName: tarotapi.cards
  tarotapi:altDomainName: tarot.cards
  tarotapi:ollamaApiKey: ""
  tarotapi:openaiApiKey: ""
  tarotapi:enableCostSaving: true
  pulumi:disable_default_providers:
    - aws
  # Pulumi Cloud state management configuration

variables:
  # Stack information
  stackName: ${pulumi.stack}
  projectName: "tarotapi"
  domainName: "tarotapi.cards"
  altDomainName: "tarot.cards"
  environment: "production"
  
  # Network Configuration
  vpcCidr: "10.0.0.0/16"
  publicSubnetEastCidr: "10.0.3.0/24"
  publicSubnetWestCidr: "10.0.4.0/24"
  publicSubnetCentralCidr: "10.0.5.0/24"
  
  # Instance Types - Cost-effective but scalable options
  dbInstanceClass: "db.t4g.micro"  # ARM-based for better price/performance
  cacheInstanceClass: "cache.t4g.micro"  # ARM-based for better price/performance
  
  # ECS Configuration - Minimal but sufficient for startup
  ecsTaskCpu: "256"
  ecsTaskMemory: "512"
  
  # Tags
  commonTags:
    Project: ${projectName}
    Environment: ${stackName}
    ManagedBy: "pulumi"

resources:
  # VPC and Network Resources
  vpc:
    type: "aws:ec2:Vpc"
    properties:
      cidrBlock: ${vpcCidr}
      enableDnsHostnames: true
      enableDnsSupport: true
      tags:
        Name: "${projectName}-vpc-${stackName}"
        Project: ${projectName}
        Environment: ${stackName}
        ManagedBy: "pulumi"

  internetGateway:
    type: "aws:ec2:InternetGateway"
    properties:
      vpcId: ${vpc.id}
      tags:
        Name: "${projectName}-igw-${stackName}"
        Project: ${projectName}
        Environment: ${stackName}
        ManagedBy: "pulumi"
  
  routeTable:
    type: "aws:ec2:RouteTable"
    properties:
      vpcId: ${vpc.id}
      tags:
        Name: "${projectName}-rt-${stackName}"
        Project: ${projectName}
        Environment: ${stackName}
        ManagedBy: "pulumi"
  
  internetRoute:
    type: "aws:ec2:Route"
    properties:
      routeTableId: ${routeTable.id}
      destinationCidrBlock: "0.0.0.0/0"
      gatewayId: ${internetGateway.id}

  publicSubnetEast:
    type: "aws:ec2:Subnet"
    properties:
      vpcId: ${vpc.id}
      cidrBlock: ${publicSubnetEastCidr}
      availabilityZone: "mx-central-1a"
      mapPublicIpOnLaunch: true
      tags:
        Name: "${projectName}-public-subnet-east-${stackName}"
        Project: ${projectName}
        Environment: ${stackName}
        ManagedBy: "pulumi"

  publicSubnetWest:
    type: "aws:ec2:Subnet"
    properties:
      vpcId: ${vpc.id}
      cidrBlock: ${publicSubnetWestCidr}
      availabilityZone: "mx-central-1b"
      mapPublicIpOnLaunch: true
      tags:
        Name: "${projectName}-public-subnet-west-${stackName}"
        Project: ${projectName}
        Environment: ${stackName}
        ManagedBy: "pulumi"

  publicSubnetCentral:
    type: "aws:ec2:Subnet"
    properties:
      vpcId: ${vpc.id}
      cidrBlock: ${publicSubnetCentralCidr}
      availabilityZone: "mx-central-1c"
      mapPublicIpOnLaunch: true
      tags:
        Name: "${projectName}-public-subnet-central-${stackName}"
        Project: ${projectName}
        Environment: ${stackName}
        ManagedBy: "pulumi"
  
  rtAssociationEast:
    type: "aws:ec2:RouteTableAssociation"
    properties:
      subnetId: ${publicSubnetEast.id}
      routeTableId: ${routeTable.id}
  
  rtAssociationWest:
    type: "aws:ec2:RouteTableAssociation"
    properties:
      subnetId: ${publicSubnetWest.id}
      routeTableId: ${routeTable.id}
  
  rtAssociationCentral:
    type: "aws:ec2:RouteTableAssociation"
    properties:
      subnetId: ${publicSubnetCentral.id}
      routeTableId: ${routeTable.id}

  # Security Groups
  appSecurityGroup:
    type: "aws:ec2:SecurityGroup"
    properties:
      vpcId: ${vpc.id}
      description: "Security group for ECS tasks"
      ingress:
        - protocol: "tcp"
          fromPort: 80
          toPort: 80
          cidrBlocks: ["0.0.0.0/0"]
        - protocol: "tcp"
          fromPort: 443
          toPort: 443
          cidrBlocks: ["0.0.0.0/0"]
        - protocol: "tcp"
          fromPort: 3000
          toPort: 3000
          cidrBlocks: ["0.0.0.0/0"]
      egress:
        - protocol: "-1"
          fromPort: 0
          toPort: 0
          cidrBlocks: ["0.0.0.0/0"]
      tags:
        Name: "${projectName}-app-sg-${stackName}"
        Project: ${projectName}
        Environment: ${stackName}
        ManagedBy: "pulumi"

  dbSecurityGroup:
    type: "aws:ec2:SecurityGroup"
    properties:
      vpcId: ${vpc.id}
      description: "Security group for RDS"
      ingress:
        - protocol: "tcp"
          fromPort: 5432
          toPort: 5432
          securityGroups: 
            - ${appSecurityGroup.id}
      egress:
        - protocol: "-1"
          fromPort: 0
          toPort: 0
          cidrBlocks: ["0.0.0.0/0"]
      tags:
        Name: "${projectName}-db-sg-${stackName}"
        Project: ${projectName}
        Environment: ${stackName}
        ManagedBy: "pulumi"

  cacheSecurityGroup:
    type: "aws:ec2:SecurityGroup"
    properties:
      vpcId: ${vpc.id}
      description: "Security group for Redis"
      ingress:
        - protocol: "tcp"
          fromPort: 6379
          toPort: 6379
          securityGroups: 
            - ${appSecurityGroup.id}
      egress:
        - protocol: "-1"
          fromPort: 0
          toPort: 0
          cidrBlocks: ["0.0.0.0/0"]
      tags:
        Name: "${projectName}-cache-sg-${stackName}"
        Project: ${projectName}
        Environment: ${stackName}
        ManagedBy: "pulumi"

  dbSubnetGroup:
    type: "aws:rds:SubnetGroup"
    properties:
      name: "${projectName}-db-subnet-${stackName}"
      subnetIds:
        - ${publicSubnetEast.id}
        - ${publicSubnetWest.id}
        - ${publicSubnetCentral.id}
      description: "Subnet group for RDS instances"
      tags:
        Name: "${projectName}-db-subnet-group-${stackName}"
        Project: ${projectName}
        Environment: ${stackName}
        ManagedBy: "pulumi"

  dbPassword:
    type: "random:RandomString"
    properties:
      length: 16
      special: false
      upper: true
      number: true

  dbInstance:
    type: "aws:rds:Instance"
    properties:
      identifier: "${projectName}-db-${stackName}"
      engine: "postgres"
      engineVersion: "14.13"
      instanceClass: ${dbInstanceClass}
      allocatedStorage: 20
      dbSubnetGroupName: ${dbSubnetGroup.name}
      username: "tarotapi"
      password: ${dbPassword.result}
      skipFinalSnapshot: true
      backupRetentionPeriod: 7
      autoMinorVersionUpgrade: true
      performanceInsightsEnabled: false
      vpcSecurityGroupIds: 
        - ${dbSecurityGroup.id}
      tags:
        Name: "${projectName}-db-${stackName}"
        Project: ${projectName}
        Environment: ${stackName}
        ManagedBy: "pulumi"

  cacheSubnetGroup:
    type: "aws:elasticache:SubnetGroup"
    properties:
      name: "${projectName}-cache-subnet-${stackName}"
      description: "Subnet group for ElastiCache instances"
      subnetIds:
        - ${publicSubnetEast.id}
        - ${publicSubnetWest.id}
        - ${publicSubnetCentral.id}
      tags:
        Name: "${projectName}-cache-subnet-group-${stackName}"
        Project: ${projectName}
        Environment: ${stackName}
        ManagedBy: "pulumi"

  cacheCluster:
    type: "aws:elasticache:Cluster"
    properties:
      clusterId: "${projectName}-redis-${stackName}"
      engine: "redis"
      nodeType: ${cacheInstanceClass}
      numCacheNodes: 1
      parameterGroupName: "default.redis7"
      port: 6379
      subnetGroupName: ${cacheSubnetGroup.name}
      securityGroupIds: 
        - ${cacheSecurityGroup.id}
      applyImmediately: true
      autoMinorVersionUpgrade: true
      tags:
        Name: "${projectName}-redis-${stackName}"
        Project: ${projectName}
        Environment: ${stackName}
        ManagedBy: "pulumi"

  s3Bucket:
    type: "aws:s3:Bucket"
    properties:
      bucket: "${projectName}-storage-${stackName}"
      acl: "private"
      versioning:
        enabled: true
      lifecycleRules:
        - enabled: true
          transitions:
            - days: 30
              storageClass: "STANDARD_IA"
            - days: 90
              storageClass: "GLACIER"
      tags:
        Name: "${projectName}-storage-${stackName}"
        Project: ${projectName}
        Environment: ${stackName}
        ManagedBy: "pulumi"

  dnsZone:
    type: "aws:route53:Zone"
    properties:
      name: ${domainName}
      tags:
        Name: "${projectName}-dns-zone-${stackName}"
        Project: ${projectName}
        Environment: ${stackName}
        ManagedBy: "pulumi"

  certificate:
    type: "aws:acm:Certificate"
    properties:
      domainName: ${domainName}
      validationMethod: "DNS"
      subjectAlternativeNames:
        - ${altDomainName}
      tags:
        Name: "${projectName}-cert-${stackName}"
        Project: ${projectName}
        Environment: ${stackName}
        ManagedBy: "pulumi"

  # ECS Resources
  ecsCluster:
    type: "aws:ecs:Cluster"
    properties:
      name: "${projectName}-cluster-${stackName}"
      settings:
        - name: "containerInsights"
          value: "disabled"
      tags:
        Name: "${projectName}-cluster-${stackName}"
        Project: ${projectName}
        Environment: ${stackName}
        ManagedBy: "pulumi"
  
  # Create Application Load Balancer
  loadBalancer:
    type: "aws:lb:LoadBalancer"
    properties:
      name: "${projectName}-alb-${stackName}"
      internal: false
      loadBalancerType: "application"
      securityGroups: 
        - ${appSecurityGroup.id}
      subnets: 
        - ${publicSubnetEast.id}
        - ${publicSubnetWest.id}
        - ${publicSubnetCentral.id}
      enableDeletionProtection: false
      tags:
        Name: "${projectName}-alb-${stackName}"
        Project: ${projectName}
        Environment: ${stackName}
        ManagedBy: "pulumi"
  
  httpListener:
    type: "aws:lb:Listener"
    properties:
      loadBalancerArn: ${loadBalancer.arn}
      port: 80
      protocol: "HTTP"
      defaultActions:
        - type: "redirect"
          redirect:
            port: "443"
            protocol: "HTTPS"
            statusCode: "HTTP_301"
  
  httpsTargetGroup:
    type: "aws:lb:TargetGroup"
    properties:
      name: "${projectName}-tg-${stackName}"
      port: 3000
      protocol: "HTTP"
      targetType: "ip"
      vpcId: ${vpc.id}
      healthCheck:
        enabled: true
        path: "/health"
        port: "3000"
        protocol: "HTTP"
        healthyThreshold: 3
        unhealthyThreshold: 3
        timeout: 5
        interval: 30
      tags:
        Name: "${projectName}-tg-${stackName}"
        Project: ${projectName}
        Environment: ${stackName}
        ManagedBy: "pulumi"

  ecsTaskExecutionRole:
    type: "aws:iam:Role"
    properties:
      assumeRolePolicy: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": "ecs-tasks.amazonaws.com" },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      managedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      tags:
        Name: "${projectName}-ecs-exec-role-${stackName}"
        Project: ${projectName}
        Environment: ${stackName}
        ManagedBy: "pulumi"

  ecsTaskRole:
    type: "aws:iam:Role"
    properties:
      assumeRolePolicy: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": "ecs-tasks.amazonaws.com" },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      tags:
        Name: "${projectName}-ecs-task-role-${stackName}"
        Project: ${projectName}
        Environment: ${stackName}
        ManagedBy: "pulumi"

  s3AccessPolicy:
    type: "aws:iam:Policy"
    properties:
      policy: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:GetObject",
                "s3:PutObject",
                "s3:DeleteObject",
                "s3:ListBucket"
              ],
              "Resource": [
                "${s3Bucket.arn}",
                "${s3Bucket.arn}/*"
              ]
            }
          ]
        }
      tags:
        Name: "${projectName}-s3-access-policy-${stackName}"
        Project: ${projectName}
        Environment: ${stackName}
        ManagedBy: "pulumi"

  taskRoleS3PolicyAttachment:
    type: "aws:iam:RolePolicyAttachment"
    properties:
      role: ${ecsTaskRole.name}
      policyArn: ${s3AccessPolicy.arn}

  containerRepository:
    type: "aws:ecr:Repository"
    properties:
      name: "${projectName}-${stackName}"
      imageScanningConfiguration:
        scanOnPush: true
      imageTagMutability: "MUTABLE"
      tags:
        Name: "${projectName}-ecr-${stackName}"
        Project: ${projectName}
        Environment: ${stackName}
        ManagedBy: "pulumi"

  # Define ECS Task and Service
  ecsTaskDefinition:
    type: "aws:ecs:TaskDefinition"
    properties:
      family: "${projectName}-task-${stackName}"
      cpu: ${ecsTaskCpu}
      memory: ${ecsTaskMemory}
      networkMode: "awsvpc"
      requiresCompatibilities: ["FARGATE"]
      executionRoleArn: ${ecsTaskExecutionRole.arn}
      taskRoleArn: ${ecsTaskRole.arn}
      containerDefinitions: |
        [
          {
            "name": "${projectName}-container",
            "image": "${containerRepository.repositoryUrl}:latest",
            "essential": true,
            "portMappings": [
              {
                "containerPort": 3000,
                "hostPort": 3000,
                "protocol": "tcp"
              }
            ],
            "environment": [
              {"name": "RAILS_ENV", "value": "${environment}"},
              {"name": "DATABASE_URL", "value": "postgres://tarotapi:${dbPassword.result}@${dbInstance.endpoint}/tarotapi"},
              {"name": "REDIS_URL", "value": "redis://${cacheCluster.cacheNodes[0].address}:6379/1"}
            ],
            "logConfiguration": {
              "logDriver": "awslogs",
              "options": {
                "awslogs-group": "/ecs/${projectName}-${stackName}",
                "awslogs-region": "mx-central-1",
                "awslogs-stream-prefix": "ecs"
              }
            }
          }
        ]
      tags:
        Name: "${projectName}-task-def-${stackName}"
        Project: ${projectName}
        Environment: ${stackName}
        ManagedBy: "pulumi"

  logGroup:
    type: "aws:cloudwatch:LogGroup"
    properties:
      name: "/ecs/${projectName}-${stackName}"
      retentionInDays: 7
      tags:
        Name: "${projectName}-logs-${stackName}"
        Project: ${projectName}
        Environment: ${stackName}
        ManagedBy: "pulumi"

  ecsService:
    type: "aws:ecs:Service"
    properties:
      name: "${projectName}-service-${stackName}"
      cluster: ${ecsCluster.id}
      taskDefinition: ${ecsTaskDefinition.arn}
      desiredCount: 1
      launchType: "FARGATE"
      deploymentMinimumHealthyPercent: 100
      deploymentMaximumPercent: 200
      networkConfiguration:
        assignPublicIp: true
        securityGroups: 
          - ${appSecurityGroup.id}
        subnets:
          - ${publicSubnetEast.id}
          - ${publicSubnetWest.id}
          - ${publicSubnetCentral.id}
      loadBalancers:
        - targetGroupArn: ${httpsTargetGroup.arn}
          containerName: "${projectName}-container"
          containerPort: 3000
      forceNewDeployment: true
      tags:
        Name: "${projectName}-service-${stackName}"
        Project: ${projectName}
        Environment: ${stackName}
        ManagedBy: "pulumi"
    options:
      dependsOn:
        - ${logGroup}

outputs:
  dbEndpoint:
    value: ${dbInstance.endpoint}
  redisEndpoint:
    value: ${cacheCluster.cacheNodes[0].address}
  ecsClusterId:
    value: ${ecsCluster.id}
  ecsClusterName:
    value: ${ecsCluster.name}
  containerRegistry:
    value: ${containerRepository.repositoryUrl}
  s3BucketName:
    value: ${s3Bucket.bucket}
  loadBalancerDns:
    value: ${loadBalancer.dnsName}
