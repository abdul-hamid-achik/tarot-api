resources:
  # hosted zone for the domain (will be created automatically if the domain is registered through aws)
  dnsZone:
    type: aws:route53:Zone
    properties:
      name: ${tarotapi:domain}
      comment: "managed by pulumi for ${tarotapi:projectName}"
      tags:
        Name: ${tarotapi:domain}
        Project: ${tarotapi:projectName}
        Environment: ${tarotapi:environment}
  
  # dns records for main application (api endpoint)
  apiRecord:
    type: aws:route53:Record
    properties:
      zoneId: ${dnsZone.zoneId}
      name: ${tarotapi:environment == "production" 
        ? "${tarotapi:domain}" 
        : "${tarotapi:environment == "preview" 
            ? "preview-${tarotapi:previewName}.${tarotapi:domain}" 
            : "${tarotapi:environment}.${tarotapi:domain}"}"}
      type: A
      aliases:
        - name: ${apiAlb.dnsName}
          zoneId: ${apiAlb.zoneId}
          evaluateTargetHealth: true
  
  # dns records for cdn (images and assets)
  cdnRecord:
    type: aws:route53:Record
    properties:
      zoneId: ${dnsZone.zoneId}
      name: ${tarotapi:environment == "production" 
        ? "cdn.${tarotapi:domain}" 
        : "${tarotapi:environment == "preview" 
            ? "cdn-preview-${tarotapi:previewName}.${tarotapi:domain}" 
            : "cdn-${tarotapi:environment}.${tarotapi:domain}"}"}
      type: A
      aliases:
        - name: ${storage.cdnDomainName}
          zoneId: CLOUDFRONT_HOSTED_ZONE_ID  # cloudfront has a fixed zone id
          evaluateTargetHealth: false
  
  # acm certificate for ssl
  sslCertificate:
    type: aws:acm:Certificate
    properties:
      domainName: ${tarotapi:domain}
      validationMethod: DNS
      subjectAlternativeNames: [
        "*.${tarotapi:domain}"
      ]
      tags:
        Name: ${tarotapi:projectName}-${tarotapi:environment}-certificate
        Project: ${tarotapi:projectName}
        Environment: ${tarotapi:environment}
  
  # validation records for certificate
  certificateValidation:
    type: aws:route53:Record
    properties:
      name: ${sslCertificate.domainValidationOptions[0].resourceRecordName}
      zoneId: ${dnsZone.zoneId}
      type: ${sslCertificate.domainValidationOptions[0].resourceRecordType}
      records: [${sslCertificate.domainValidationOptions[0].resourceRecordValue}]
      ttl: 60
  
  # wait for certificate validation
  certificateValidationCompletion:
    type: aws:acm:CertificateValidation
    properties:
      certificateArn: ${sslCertificate.arn}
      validationRecordFqdns: [${certificateValidation.fqdn}]

outputs:
  dnsZoneId: ${dnsZone.zoneId}
  dnsNameServers: ${dnsZone.nameServers}
  apiDns: ${apiRecord.name}
  cdnDns: ${cdnRecord.name}
  certificateArn: ${sslCertificate.arn}
  validatedCertificateArn: ${certificateValidationCompletion.certificateArn}

notes: |
  # domain registration information
  
  ## regarding domain registration for tarotapi.cards
  
  aws route 53 allows you to register new domains directly, but this cannot be fully automated through infrastructure as code
  due to the nature of domain registration which requires personal/business information and payment.
  
  to register the domain tarotapi.cards through aws, you'll need to:
  
  1. first deploy this infrastructure which creates the hosted zone
  2. then register the domain manually through the aws console or use the following rake task:
  
     ```
     rake infra:register_domain
     ```
  
  this rake task will prompt you for the required information and use the aws cli to register the domain.
  
  alternatively, if you prefer to register the domain through another registrar (such as namecheap, godaddy, etc.),
  you'll need to:
  
  1. register the domain with the external registrar
  2. update the domain's nameservers to point to the aws route 53 nameservers (output from this stack)
  
  the nameservers for your hosted zone will be available in the pulumi stack output after deployment.
  
  ## preventing domain loss
  
  to ensure you don't lose the tarotapi.cards domain:
  
  1. enable auto-renewal for the domain in the aws route 53 console or with your external registrar
  2. ensure the payment method associated with the domain is valid and up-to-date
  3. set up monitoring for the domain expiration date
  4. add an iam policy that prevents the deletion of the hosted zone
  
  the following rake task will help you set up domain protection:
  
  ```
  rake infra:protect_domain
  ``` 