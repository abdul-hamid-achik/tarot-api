config:
  aws:region: ${AWS_DEFAULT_REGION}
  environment: preview
  ttl:enabled: true
  ttl:hours: ${PREVIEW_TTL_HOURS:-24}  # hours before auto-deletion, default 24
  ttl:timestamp: ${PREVIEW_EXPIRATION}  # ISO8601 timestamp for expiration
  branch:name: ${PREVIEW_BRANCH}  # branch name for the preview
  creator:name: ${PREVIEW_CREATOR}  # user who created the preview
  app:name: ${APP_NAME}
  app:domain: ${DOMAIN_NAME}
  app:container:
    cpu: 256
    memory: 512
    port: 3000
  aws:ecs:
    cluster:
      name: ${APP_NAME}-preview-${branch:name}
    service:
      desiredCount: 1
  aws:vpc:
    cidr: "10.0.0.0/16"
    publicSubnets:
      - "10.0.1.0/24"
      - "10.0.2.0/24"
    privateSubnets:
      - "10.0.3.0/24"
      - "10.0.4.0/24"

resources:
  vpc:
    type: aws:ec2:Vpc
    properties:
      cidrBlock: ${aws:vpc:cidr}
      enableDnsHostnames: true
      enableDnsSupport: true
      tags:
        Name: ${app:name}-preview-${branch:name}-vpc
        Environment: preview
        branch: ${branch:name}
        creator: ${creator:name}
        ttl: ${ttl:hours}h
        expiration: ${ttl:timestamp}

  cluster:
    type: aws:ecs:Cluster
    properties:
      name: ${aws:ecs:cluster:name}
      tags:
        Environment: preview
        branch: ${branch:name}
        creator: ${creator:name}
        ttl: ${ttl:hours}h
        expiration: ${ttl:timestamp}

  # lambda for ttl cleanup
  cleanupRole:
    type: aws:iam:Role
    properties:
      assumeRolePolicy: |
        {
          "Version": "2012-10-17",
          "Statement": [{
            "Action": "sts:AssumeRole",
            "Principal": {
              "Service": "lambda.amazonaws.com"
            },
            "Effect": "Allow"
          }]
        }
      managedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      inlinePolicies:
        - name: cleanup
          policy: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:DeleteService",
                    "ecs:DeleteCluster",
                    "ec2:DeleteVpc",
                    "ec2:DescribeVpcs",
                    "ecs:DescribeClusters",
                    "ecs:ListServices",
                    "ecs:DescribeServices",
                    "ecs:UpdateService"
                  ],
                  "Resource": "*"
                }
              ]
            }

  cleanupFunction:
    type: aws:lambda:Function
    properties:
      runtime: python3.9
      handler: index.handler
      role: ${cleanupRole.arn}
      timeout: 300
      code: |
        import boto3
        import datetime
        import os
        
        def handler(event, context):
            ecs = boto3.client('ecs')
            ec2 = boto3.client('ec2')
            
            # find resources with ttl tags
            vpcs = ec2.describe_vpcs(
                Filters=[{'Name': 'tag-key', 'Values': ['ttl']}]
            )['Vpcs']
            
            clusters = ecs.list_clusters()['clusterArns']
            clusters = ecs.describe_clusters(clusters=clusters)['clusters']
            
            now = datetime.datetime.now(datetime.timezone.utc)
            
            for vpc in vpcs:
                expiration = None
                for tag in vpc['Tags']:
                    if tag['Key'] == 'expiration':
                        expiration = datetime.datetime.fromisoformat(tag['Value'])
                        break
                
                if expiration and now > expiration:
                    # delete vpc and related resources
                    ec2.delete_vpc(VpcId=vpc['VpcId'])
            
            for cluster in clusters:
                expiration = None
                for tag in cluster.get('tags', []):
                    if tag['key'] == 'expiration':
                        expiration = datetime.datetime.fromisoformat(tag['value'])
                        break
                
                if expiration and now > expiration:
                    # scale down services
                    services = ecs.list_services(cluster=cluster['clusterArn'])['serviceArns']
                    if services:
                        ecs.update_service(
                            cluster=cluster['clusterArn'],
                            service=services[0],
                            desiredCount=0
                        )
                    # delete cluster
                    ecs.delete_cluster(cluster=cluster['clusterArn'])

  # eventbridge rule to trigger cleanup
  cleanupRule:
    type: aws:cloudwatch:EventRule
    properties:
      scheduleExpression: rate(5 minutes)
      description: check for expired preview environments
      isEnabled: true
      targets:
        - arn: ${cleanupFunction.arn}
          id: cleanup-lambda

  # permission for eventbridge to invoke lambda
  cleanupPermission:
    type: aws:lambda:Permission
    properties:
      action: lambda:InvokeFunction
      function: ${cleanupFunction.name}
      principal: events.amazonaws.com
      sourceArn: ${cleanupRule.arn}

outputs:
  vpcId: ${vpc.id}
  clusterArn: ${cluster.arn}
  previewUrl: https://preview-${branch:name}.${app:domain} 