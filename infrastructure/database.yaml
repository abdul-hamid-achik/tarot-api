resources:
  # db subnet group
  dbSubnetGroup:
    type: aws:rds:SubnetGroup
    properties:
      name: ${tarotapi:projectName}-${tarotapi:environment}-db-subnet-group
      subnetIds: ${network.privateSubnetIds}
      tags:
        Name: ${tarotapi:projectName}-${tarotapi:environment}-db-subnet-group
  
  # database parameter group for postgres primary
  dbParameterGroup:
    type: aws:rds:ParameterGroup
    properties:
      family: postgres16
      name: ${tarotapi:projectName}-${tarotapi:environment}-db-pg
      description: parameter group for ${tarotapi:projectName} ${tarotapi:environment}
      parameters:
        # recommended postgres performance settings
        shared_buffers: ${tarotapi:environment == "production" ? "8GB" : "1GB"}
        max_connections: ${tarotapi:environment == "production" ? "300" : "100"}
        work_mem: ${tarotapi:environment == "production" ? "128MB" : "16MB"}
        maintenance_work_mem: ${tarotapi:environment == "production" ? "2GB" : "256MB"}
        effective_cache_size: ${tarotapi:environment == "production" ? "24GB" : "4GB"}
        checkpoint_timeout: "15min"
        default_statistics_target: "100"
        random_page_cost: "1.1"
        # Set session role identifier for Makara routing
        session.role: "primary"
      tags:
        Name: ${tarotapi:projectName}-${tarotapi:environment}-db-pg
  
  # database parameter group for postgres replica
  dbReplicaParameterGroup:
    type: aws:rds:ParameterGroup
    properties:
      family: postgres16
      name: ${tarotapi:projectName}-${tarotapi:environment}-db-replica-pg
      description: replica parameter group for ${tarotapi:projectName} ${tarotapi:environment}
      parameters:
        # replica-specific settings (read-optimized)
        shared_buffers: ${tarotapi:environment == "production" ? "8GB" : "1GB"}
        max_connections: ${tarotapi:environment == "production" ? "300" : "100"}
        work_mem: ${tarotapi:environment == "production" ? "256MB" : "32MB"} # Higher for read queries
        maintenance_work_mem: ${tarotapi:environment == "production" ? "2GB" : "256MB"}
        effective_cache_size: ${tarotapi:environment == "production" ? "24GB" : "4GB"}
        checkpoint_timeout: "15min"
        default_statistics_target: "100"
        random_page_cost: "1.1"
        # Set session role identifier for Makara routing
        session.role: "replica"
      tags:
        Name: ${tarotapi:projectName}-${tarotapi:environment}-db-replica-pg
  
  # database instance
  database:
    type: aws:rds:Instance
    properties:
      engine: postgres
      engineVersion: "16.1"
      instanceClass: ${tarotapi:environment == "production" 
        ? "db.t4g.large" 
        : (tarotapi:enableCostSaving ? "db.t4g.micro" : "db.t4g.small")}
      allocatedStorage: ${tarotapi:environment == "production" ? 100 : 20}
      storageType: ${tarotapi:environment == "production" ? "gp3" : "gp2"}
      dbName: tarot_api_${tarotapi:environment}
      username: tarot_api
      password: ${databasePassword}
      skipFinalSnapshot: ${tarotapi:environment != "production"}
      finalSnapshotIdentifier: ${tarotapi:environment == "production" 
        ? "${tarotapi:projectName}-${tarotapi:environment}-final-snapshot" 
        : null}
      copyTagsToSnapshot: true
      backupRetentionPeriod: ${tarotapi:environment == "production" ? 30 : 7}
      backupWindow: "03:00-04:00"
      maintenanceWindow: "mon:04:00-mon:05:00"
      multiAz: ${tarotapi:environment == "production"}
      publiclyAccessible: false
      vpcSecurityGroupIds: [${network.dbSecurityGroupId}]
      dbSubnetGroupName: ${dbSubnetGroup.name}
      parameterGroupName: ${dbParameterGroup.name}
      enabledCloudwatchLogsExports: ["postgresql", "upgrade"]
      monitoringInterval: ${tarotapi:environment == "production" ? 60 : 0}
      performanceInsightsEnabled: ${tarotapi:environment == "production"}
      performanceInsightsRetentionPeriod: ${tarotapi:environment == "production" ? 7 : 0}
      deletionProtection: ${tarotapi:environment == "production"}
      autoMinorVersionUpgrade: true
      # Custom parameters for Makara identification
      tags:
        Name: ${tarotapi:projectName}-${tarotapi:environment}-db
        Role: "Primary"
        Application: ${tarotapi:projectName}
        Environment: ${tarotapi:environment}
  
  # database read replica for production environments
  databaseReplica:
    type: aws:rds:Instance
    properties:
      # Use a stronger instance for production replicas
      instanceClass: ${tarotapi:environment == "production" ? "db.t4g.medium" : "db.t4g.small"}
      replicateSourceDb: ${database.id}
      engine: postgres
      engineVersion: "16.1"
      skipFinalSnapshot: true
      copyTagsToSnapshot: true
      backupRetentionPeriod: 7
      backupWindow: "03:00-04:00"
      maintenanceWindow: "mon:04:00-mon:05:00"
      multiAz: false
      publiclyAccessible: false
      vpcSecurityGroupIds: [${network.dbSecurityGroupId}]
      # Use replica-specific parameter group
      parameterGroupName: ${dbReplicaParameterGroup.name}
      enabledCloudwatchLogsExports: ["postgresql", "upgrade"]
      performanceInsightsEnabled: true
      performanceInsightsRetentionPeriod: 7
      autoMinorVersionUpgrade: true
      # Custom parameters for Makara identification
      tags:
        Name: ${tarotapi:projectName}-${tarotapi:environment}-db-replica
        Role: "Replica"
        Application: ${tarotapi:projectName}
        Environment: ${tarotapi:environment}
    options:
      # Create replicas in production by default, make it configurable in staging
      condition: ${tarotapi:environment == "production" || (tarotapi:environment == "staging" && tarotapi:enableReplica == true)}

outputs:
  dbAddress: ${database.address}
  dbPort: ${database.port}
  dbName: ${database.dbName}
  dbUsername: ${database.username}
  # Use empty values for replica when not created
  dbReplicaAddress: ${tarotapi:environment == "production" || (tarotapi:environment == "staging" && tarotapi:enableReplica == true) ? databaseReplica.address : ""}
  dbReplicaPort: ${tarotapi:environment == "production" || (tarotapi:environment == "staging" && tarotapi:enableReplica == true) ? databaseReplica.port : ""}
  # Provide a flag to indicate if replica is available (for app config)
  hasReplica: ${tarotapi:environment == "production" || (tarotapi:environment == "staging" && tarotapi:enableReplica == true) ? "true" : "false"}
  
config:
  # this will be set securely through pulumi config set --secret
  databasePassword:
    type: string
    secret: true 