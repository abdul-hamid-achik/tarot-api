resources:
  # vpc for isolation and security
  vpc:
    type: aws:ec2:Vpc
    properties:
      cidrBlock: 10.0.0.0/16
      enableDnsHostnames: true
      enableDnsSupport: true
      tags:
        Name: ${projectName}-${environment}-vpc
  
  # internet gateway for public internet access
  igw:
    type: aws:ec2:InternetGateway
    properties:
      vpcId: ${vpc.id}
      tags:
        Name: ${projectName}-${environment}-igw
  
  # public subnets (2 availability zones for high availability)
  publicSubnet1:
    type: aws:ec2:Subnet
    properties:
      vpcId: ${vpc.id}
      cidrBlock: 10.0.1.0/24
      availabilityZone: ${aws:region}a
      mapPublicIpOnLaunch: true
      tags:
        Name: ${projectName}-${environment}-public-1
  
  publicSubnet2:
    type: aws:ec2:Subnet
    properties:
      vpcId: ${vpc.id}
      cidrBlock: 10.0.2.0/24
      availabilityZone: ${aws:region}b
      mapPublicIpOnLaunch: true
      tags:
        Name: ${projectName}-${environment}-public-2
  
  # private subnets for db, cache and app containers
  privateSubnet1:
    type: aws:ec2:Subnet
    properties:
      vpcId: ${vpc.id}
      cidrBlock: 10.0.3.0/24
      availabilityZone: ${aws:region}a
      tags:
        Name: ${projectName}-${environment}-private-1
  
  privateSubnet2:
    type: aws:ec2:Subnet
    properties:
      vpcId: ${vpc.id}
      cidrBlock: 10.0.4.0/24
      availabilityZone: ${aws:region}b
      tags:
        Name: ${projectName}-${environment}-private-2
  
  # route table for public subnets
  publicRouteTable:
    type: aws:ec2:RouteTable
    properties:
      vpcId: ${vpc.id}
      tags:
        Name: ${projectName}-${environment}-public-rt
  
  # route to internet through internet gateway
  publicRoute:
    type: aws:ec2:Route
    properties:
      routeTableId: ${publicRouteTable.id}
      destinationCidrBlock: 0.0.0.0/0
      gatewayId: ${igw.id}
  
  # associate route table with public subnets
  publicRtAssociation1:
    type: aws:ec2:RouteTableAssociation
    properties:
      subnetId: ${publicSubnet1.id}
      routeTableId: ${publicRouteTable.id}
  
  publicRtAssociation2:
    type: aws:ec2:RouteTableAssociation
    properties:
      subnetId: ${publicSubnet2.id}
      routeTableId: ${publicRouteTable.id}
  
  # nat gateway for private subnet internet access
  natGatewayEip:
    type: aws:ec2:Eip
    properties:
      vpc: true
      tags:
        Name: ${projectName}-${environment}-nat-eip
  
  natGateway:
    type: aws:ec2:NatGateway
    properties:
      allocationId: ${natGatewayEip.id}
      subnetId: ${publicSubnet1.id}
      tags:
        Name: ${projectName}-${environment}-nat
  
  # private route table
  privateRouteTable:
    type: aws:ec2:RouteTable
    properties:
      vpcId: ${vpc.id}
      tags:
        Name: ${projectName}-${environment}-private-rt
  
  # route to internet through nat gateway
  privateRoute:
    type: aws:ec2:Route
    properties:
      routeTableId: ${privateRouteTable.id}
      destinationCidrBlock: 0.0.0.0/0
      natGatewayId: ${natGateway.id}
  
  # associate route table with private subnets
  privateRtAssociation1:
    type: aws:ec2:RouteTableAssociation
    properties:
      subnetId: ${privateSubnet1.id}
      routeTableId: ${privateRouteTable.id}
  
  privateRtAssociation2:
    type: aws:ec2:RouteTableAssociation
    properties:
      subnetId: ${privateSubnet2.id}
      routeTableId: ${privateRouteTable.id}
  
  # security group for application load balancer
  albSecurityGroup:
    type: aws:ec2:SecurityGroup
    properties:
      vpcId: ${vpc.id}
      description: allow http/https inbound traffic
      ingress:
        - protocol: tcp
          fromPort: 80
          toPort: 80
          cidrBlocks: ["0.0.0.0/0"]
        - protocol: tcp
          fromPort: 443
          toPort: 443
          cidrBlocks: ["0.0.0.0/0"]
      egress:
        - protocol: -1
          fromPort: 0
          toPort: 0
          cidrBlocks: ["0.0.0.0/0"]
      tags:
        Name: ${projectName}-${environment}-alb-sg
  
  # security group for app containers
  appSecurityGroup:
    type: aws:ec2:SecurityGroup
    properties:
      vpcId: ${vpc.id}
      description: allow traffic from alb and within the group
      ingress:
        - protocol: tcp
          fromPort: 3000
          toPort: 3000
          securityGroups: [${albSecurityGroup.id}]
      egress:
        - protocol: -1
          fromPort: 0
          toPort: 0
          cidrBlocks: ["0.0.0.0/0"]
      tags:
        Name: ${projectName}-${environment}-app-sg
  
  # security group for database
  dbSecurityGroup:
    type: aws:ec2:SecurityGroup
    properties:
      vpcId: ${vpc.id}
      description: allow postgres traffic from app sg
      ingress:
        - protocol: tcp
          fromPort: 5432
          toPort: 5432
          securityGroups: [${appSecurityGroup.id}]
      egress:
        - protocol: -1
          fromPort: 0
          toPort: 0
          cidrBlocks: ["0.0.0.0/0"]
      tags:
        Name: ${projectName}-${environment}-db-sg
  
  # security group for redis
  redisSecurityGroup:
    type: aws:ec2:SecurityGroup
    properties:
      vpcId: ${vpc.id}
      description: allow redis traffic from app sg
      ingress:
        - protocol: tcp
          fromPort: 6379
          toPort: 6379
          securityGroups: [${appSecurityGroup.id}]
      egress:
        - protocol: -1
          fromPort: 0
          toPort: 0
          cidrBlocks: ["0.0.0.0/0"]
      tags:
        Name: ${projectName}-${environment}-redis-sg

outputs:
  vpcId: ${vpc.id}
  publicSubnetIds: [${publicSubnet1.id}, ${publicSubnet2.id}]
  privateSubnetIds: [${privateSubnet1.id}, ${privateSubnet2.id}]
  albSecurityGroupId: ${albSecurityGroup.id}
  appSecurityGroupId: ${appSecurityGroup.id}
  dbSecurityGroupId: ${dbSecurityGroup.id}
  redisSecurityGroupId: ${redisSecurityGroup.id} 