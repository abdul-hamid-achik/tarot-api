---
description: Database migration standards and practices for the Tarot API project
globs: ["db/migrate/*.rb", "db/schema.rb"]
alwaysApply: false
---

# Database Migration Guidelines

## Migration Creation

- Create migrations using Rails generators: `rails g migration CreateOrUpdateTableName`
- One migration per logical change to maintain clarity
- Use meaningful migration names that describe the purpose
- Add detailed comments for complex migrations

## Best Practices

- Always run migrations in development before committing
- Make migrations reversible with `up` and `down` methods for complex changes
- Use `change` method for simple migrations
- Add appropriate database indexes for foreign keys and frequently queried columns
- Set appropriate NOT NULL constraints
- Include foreign key constraints where appropriate

## Data Migrations

- Separate schema changes from data migrations when possible
- For large tables, use batching to avoid locks: `find_in_batches` or `find_each`
- Consider using background jobs for very large data migrations
- Add validations before running data migrations
- Log progress for long-running migrations

## Column Types and Naming

- Use the most specific column type possible (e.g., `boolean` instead of `integer`)
- Follow naming conventions:
  - Boolean columns should be named with a question form (e.g., `is_admin`, `has_subscription`)
  - Foreign keys should be named as `model_id`
  - Timestamp columns should use Rails conventions: `created_at`, `updated_at`
- Use `uuid` for primary keys when possible

## Schema Management

- Keep `schema.rb` up to date
- Never edit `schema.rb` directly
- Review schema changes before deployment
- Use structure.sql for complex database features not supported by schema.rb

## Performance Considerations

- Add indexes in separate migrations
- Use `add_index` with `algorithm: :concurrently` for production
- Avoid table locks on large tables
- Consider background migrations for production databases
- Test migrations against production-like data volumes 