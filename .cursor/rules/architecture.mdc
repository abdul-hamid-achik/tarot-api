---
description: 
globs: 
alwaysApply: true
---
# Tarot API Architecture

## System Components

- **Web Layer**: Rails controllers and views handling HTTP requests
- **Domain Layer**: Core business logic and data models
- **Infrastructure**: External services and dependencies
- **Workers**: Background job processing

## Technologies

- Rails: Web framework
- PostgreSQL: Primary database
- Redis: Caching and background jobs
- AWS S3/MinIO: File storage
- Docker: Containerization
- AWS: Deployment environment

## Component Relationships

- Controllers communicate with Services and Models
- Services orchestrate business logic using Models, Storage, and Cache
- Workers process background tasks using Services
- Models define data structures and persistence logic

## Authentication Mechanisms

The API supports three authentication methods:

- **JWT Bearer Token**: Primary authentication method for registered users
  - Obtained through login or registration endpoints
  - Passed via `Authorization: Bearer <token>` header
  - Short-lived with refresh token capability
  - Used for regular user sessions

- **HTTP Basic Authentication**: Alternative direct authentication
  - Uses standard HTTP Basic Auth with email and password
  - Passed via `Authorization: Basic <base64-encoded-credentials>` header
  - Primarily for agent access or simple integrations
  - Lower rate limits than JWT authentication

- **API Key Authentication**: For automated systems and services
  - Generated for agents/services via the API Key endpoints
  - Passed via `X-API-Key: <api-key>` header
  - Supports expiration and revocation
  - Tracked for usage metrics and rate limiting
  - Each key has configurable rate limits

Multiple authentication methods can be enabled simultaneously, with precedence in the order: JWT, API Key, Basic Auth.

## Boundaries

- Controllers should never access Database directly
- Models should not depend on Controllers
- Infrastructure components are isolated from business logic