---
description: Testing standards, principles, and examples for the Tarot API project
globs: ["spec/**/*.rb", "features/**/*.feature", "test/**/*.rb"]
alwaysApply: false
---

# Testing Guidelines

## Testing Framework

The Tarot API uses multiple testing approaches:

| Type | Framework | Directory | Purpose |
|------|-----------|-----------|---------|
| Unit Tests | RSpec | `spec/` | Testing classes and methods in isolation |
| Request Tests | RSpec | `spec/requests/` | Testing API endpoints |
| Integration Tests | RSpec | `spec/integration/` | Testing component interactions |
| Behavior Tests | Cucumber | `features/` | Business-level feature testing |

## Test Coverage Requirements

- **Models**: 100% coverage
- **Controllers**: 95% coverage
- **Services**: 100% coverage
- **Lib modules**: 90% coverage
- **Overall minimum**: 85% coverage

## RSpec Testing

### Model Tests

```ruby
# spec/models/card_spec.rb
require 'rails_helper'

RSpec.describe Card, type: :model do
  describe "validations" do
    it "requires a name" do
      card = build(:card, name: nil)
      expect(card).not_to be_valid
      expect(card.errors[:name]).to include("can't be blank")
    end
  end
  
  describe "associations" do
    it "belongs to a suit" do
      association = described_class.reflect_on_association(:suit)
      expect(association.macro).to eq :belongs_to
    end
  end
  
  describe "#reversed?" do
    it "returns true when orientation is reversed" do
      card = build(:card, orientation: "reversed")
      expect(card.reversed?).to be true
    end
  end
end
```

### Controller Tests

```ruby
# spec/requests/api/v1/cards_controller_spec.rb
require 'rails_helper'

RSpec.describe Api::V1::CardsController, type: :request do
  describe "GET /api/v1/cards" do
    before do
      create_list(:card, 3)
    end
    
    it "returns all cards" do
      get "/api/v1/cards"
      
      expect(response).to have_http_status(:ok)
      expect(json_response.size).to eq(3)
    end
    
    it "filters by suit" do
      create(:card, suit: "cups")
      
      get "/api/v1/cards", params: { suit: "cups" }
      
      expect(response).to have_http_status(:ok)
      expect(json_response.size).to eq(1)
      expect(json_response.first["suit"]).to eq("cups")
    end
  end
end
```

### Service Tests

```ruby
# spec/services/reading_service_spec.rb
require 'rails_helper'

RSpec.describe ReadingService do
  describe "#generate_reading" do
    let(:spread) { create(:spread, :three_card) }
    let(:service) { described_class.new(spread: spread, user: create(:user)) }
    
    it "creates a reading with the correct number of cards" do
      reading = service.generate_reading
      
      expect(reading).to be_persisted
      expect(reading.reading_cards.count).to eq(3)
    end
    
    it "doesn't repeat cards" do
      reading = service.generate_reading
      
      card_ids = reading.reading_cards.map(&:card_id)
      expect(card_ids.uniq.size).to eq(card_ids.size)
    end
  end
end
```

## Cucumber Testing

### Feature Files

```gherkin
# features/readings/create_reading.feature
Feature: Create Reading
  As a tarot enthusiast
  I want to create a new reading
  So that I can gain insights into my question

  Scenario: Creating a three-card reading
    Given I am logged in
    When I visit the new reading page
    And I select "Three Card Spread" from the spread options
    And I enter "What does my future hold?" as my question
    And I click "Create Reading"
    Then I should see a reading with 3 cards
    And I should see my question "What does my future hold?"
    And I should see interpretations for each card
```

### Step Definitions

```ruby
# features/step_definitions/reading_steps.rb
When("I select {string} from the spread options") do |spread_name|
  select spread_name, from: "Spread"
end

Then("I should see a reading with {int} cards") do |card_count|
  expect(page).to have_css(".card", count: card_count)
end
```

## Factory Setup

```ruby
# spec/factories/cards.rb
FactoryBot.define do
  factory :card do
    sequence(:name) { |n| "Card #{n}" }
    arcana { "major" }
    suit { nil }
    number { 1 }
    
    trait :minor do
      arcana { "minor" }
      suit { "cups" }
    end
    
    trait :upright do
      orientation { "upright" }
    end
    
    trait :reversed do
      orientation { "reversed" }
    end
  end
end
```

## Testing Best Practices

1. **Write tests first** (TDD approach)
2. **Keep tests focused** on a single behavior
3. **Use descriptive naming** for test cases
4. **Use shared contexts** for common setup
5. **Mock external services** with WebMock or VCR
6. **Run tests before commits** with `bundle exec rake test`
7. **Use test coverage reports** to identify gaps
8. **Avoid flaky tests** by isolating external dependencies