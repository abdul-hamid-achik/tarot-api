---
description: Development and deployment tools for the Tarot API project
globs: ["Rakefile", "lib/tasks/**/*.rake", "docker-compose.yml", ".github/workflows/*.yml"]
alwaysApply: false
---

# Development Tools and Commands

## Rake Tasks

### Organization
- All rake tasks are in `lib/tasks/` organized by functionality:
  - `docker.rake`: Container and infrastructure tasks
  - `db.rake`: Database management tasks
  - `dev.rake`: Development environment tasks
  - `ci.rake`: Continuous integration tasks
  - `deploy.rake`: Deployment tasks

### Common Commands
- Development: `bundle exec rake dev:setup`
- Testing: `bundle exec rake test`
- Linting: `bundle exec rubocop -a`
- Database: `bundle exec rake db:reset`
- Deployment: `bundle exec rake deploy:production`

## Docker

### Local Development
- Start environment: `docker-compose up`
- Run with detached mode: `docker-compose up -d`
- Stop containers: `docker-compose down`
- Rebuild containers: `docker-compose build`
- View logs: `docker-compose logs -f`

### Container Management
- Enter console: `docker-compose exec app rails c`
- Run migrations: `docker-compose exec app rails db:migrate`
- Run tests: `docker-compose exec app bundle exec rspec`

## Deployment Tools

### Pulumi (Infrastructure as Code)
- Manages cloud infrastructure resources
- Commands run through rake tasks: `rake infra:apply`
- State stored in S3 bucket: `tarot-api-pulumi-state`

### Kamal (Zero-downtime Deployment)
- Handles container deployment
- Commands run through rake tasks: `rake deploy:production`
- Supports rollbacks: `rake deploy:rollback`

## Domain Names

- Always use either `tarotapi.cards` or `tarot.cards` for the application
- Use appropriate environment subdomain: `dev.tarotapi.cards`, `staging.tarotapi.cards`
