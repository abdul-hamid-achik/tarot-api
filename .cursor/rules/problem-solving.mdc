---
description: Problem-solving methodology and decision framework for the Tarot API project
globs: ["app/**/*.rb", "lib/**/*.rb"]
alwaysApply: false
---

# Problem Solving Framework

## 1. Assess the Problem

Start by understanding the nature of the problem:

- **Define the issue**: What's happening vs. what should be happening?
- **Impact assessment**: How critical is this problem? Who is affected?
- **Scope determination**: Is this isolated or systemic?
- **Time sensitivity**: Is this urgent or can it be scheduled?

## 2. Approach Selection

Choose the appropriate problem-solving approach:

| Approach | When to Use | Example |
|----------|-------------|---------|
| **Sequential Analysis** | Complex problems needing careful planning | Database performance issues |
| **Rapid Prototyping** | Problems needing quick validation | New API endpoint implementation |
| **Pattern Matching** | Problems similar to previously solved issues | Authentication errors |
| **Research & Consultation** | Novel problems outside the team's expertise | New cloud infrastructure integration |

## 3. Solution Development

### For Sequential Analysis:

1. **Research**: Check existing documentation and code
2. **Design**: Plan the solution architecture
3. **Prototype**: Create a minimal implementation
4. **Test**: Validate the solution works
5. **Refine**: Improve based on feedback
6. **Implement**: Full implementation with tests

### For Rapid Prototyping:

1. **Spike**: Quick implementation to prove concept
2. **Evaluate**: Test the prototype against requirements
3. **Refactor**: Clean up the solution for production
4. **Test**: Add proper test coverage

## 4. Technical Practices

Always incorporate these practices:

- **Test-Driven Development**:
  ```ruby
  # Write test first
  describe CardService do
    it "returns cards from the specified suit" do
      # Test implementation
    end
  end
  
  # Then implement the feature
  def cards_by_suit(suit)
    # Implementation
  end
  ```

- **Code Quality Checks**:
  - Run Rubocop before commit: `bundle exec rubocop -a`
  - Ensure test coverage: `bundle exec rake coverage:check`

- **Documentation**:
  - Document decisions in code comments
  - Update README or related docs for significant changes

## 5. Validation & Review

Before considering a problem solved:

- Run the full test suite
- Verify edge cases are handled
- Review your own code
- Request peer review for complex solutions
- Ensure monitoring is in place

## 6. Learning Cycle

After solving a problem:

- Document the solution for future reference
- Share learnings with the team if appropriate
- Consider if similar issues could exist elsewhere
- Update this methodology if needed

## Common Patterns

### API Error Handling
```ruby
def show
  begin
    card = Card.find(params[:id])
    render json: card
  rescue ActiveRecord::RecordNotFound
    render_not_found("Card not found")
  rescue => e
    render_server_error(e)
  end
end
```

### Performance Optimization
```ruby
# Before optimization
def expensive_operation
  # Inefficient code
end

# After optimization
def expensive_operation
  # 1. Add caching
  # 2. Use database indices
  # 3. Reduce N+1 queries
end
```